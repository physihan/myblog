<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>physihan的博客</title>
  <subtitle>什么都懂一点，生活更精彩一点</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://physihan.github.io/"/>
  <updated>2016-11-29T10:59:47.698Z</updated>
  <id>http://physihan.github.io/</id>
  
  <author>
    <name>physihan</name>
    <email>1095714266@qq.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>亲自上手es6的class</title>
    <link href="http://physihan.github.io/2016/11/29/%E4%BA%B2%E8%87%AA%E4%B8%8A%E6%89%8Bes6%E7%9A%84class/"/>
    <id>http://physihan.github.io/2016/11/29/亲自上手es6的class/</id>
    <published>2016-11-29T10:59:05.000Z</published>
    <updated>2016-11-29T10:59:47.698Z</updated>
    
    <content type="html"><![CDATA[<p>新一代标准已经提出有些日子了，最近在写react的时候，react用了大量的class的语法去写组件，对于class的理解不是很深刻，于是这里把从babel转换的代码分享给大家。</p>
<h2 id="类-构造函数-原型"><a href="#类-构造函数-原型" class="headerlink" title="类=构造函数+原型"></a>类=构造函数+原型</h2><p>es6标准的类和其他语言的类很相似，但是这只是一种语法糖，底层还是通过原型继承实现的，首先看一个简单的类的形式<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">class A &#123;</div><div class="line">  constructor()&#123;</div><div class="line">    this.name=&apos;xiaoming&apos;</div><div class="line">  &#125;</div><div class="line">  sayHello()&#123;</div><div class="line">    console.log(&apos;hello&apos;)</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>包含一个构造函数，和一个类里面的函数，如果大家对原型继承有所了解的话，这种形式可以近似写成<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">function A()&#123;</div><div class="line">  this.name=&apos;xiaoming&apos;;</div><div class="line">&#125;</div><div class="line">A.prototype=&#123;</div><div class="line">  sayHello:function()&#123;</div><div class="line">    console.log(&apos;hello&apos;)</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>这就是类的雏形，但是实际操作上还是有些不同的，下面就是babel翻译的es5的语法</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line">&apos;use strict&apos;;</div><div class="line"></div><div class="line">var _createClass = function () &#123; </div><div class="line">function defineProperties(target, props) &#123;</div><div class="line">  for (var i = 0; i &lt; props.length; i++) &#123;</div><div class="line">    var descriptor = props[i]; </div><div class="line">    descriptor.enumerable = descriptor.enumerable || false; </div><div class="line">    descriptor.configurable = true; </div><div class="line">    if (&quot;value&quot; in descriptor)</div><div class="line">      descriptor.writable = true; </div><div class="line">    Object.defineProperty(target, descriptor.key, descriptor);</div><div class="line">   &#125; </div><div class="line">&#125;</div><div class="line">return function (Constructor, protoProps, staticProps) &#123;</div><div class="line">  if (protoProps) </div><div class="line">    defineProperties(Constructor.prototype, protoProps);</div><div class="line">  if (staticProps) </div><div class="line">    defineProperties(Constructor, staticProps); </div><div class="line">return Constructor; </div><div class="line">&#125;&#125;();</div><div class="line"></div><div class="line">function _classCallCheck(instance, Constructor) &#123; </div><div class="line">  if (!(instance instanceof Constructor))  &#123;</div><div class="line">    throw new TypeError(&quot;Cannot call a class as a function&quot;);</div><div class="line">  &#125; </div><div class="line">&#125;</div><div class="line"></div><div class="line">var A = function () &#123;</div><div class="line">  function A() &#123;</div><div class="line">    _classCallCheck(this, A);</div><div class="line">    this.name = &apos;xiaoming&apos;;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  _createClass(A, [&#123;</div><div class="line">    key: &apos;sayHello&apos;,</div><div class="line">    value: function sayHello() &#123;</div><div class="line">      console.log(&apos;hello&apos;);</div><div class="line">    &#125;</div><div class="line">  &#125;]);</div><div class="line"></div><div class="line">  return A;</div><div class="line">&#125;();</div></pre></td></tr></table></figure>
<p>这个代码感兴趣大家可以看看，其中有几个地方需要注意，这个类A不能当成函数去调用，<code>A()</code>这种方法调用会报错，可以<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">let a = new A();</div></pre></td></tr></table></figure></p>
<p>这样去实例化一个类，当然类都是需要继承的，新版本中继承用extends来实现，考虑这样一个类B继承类A<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"> class A &#123;</div><div class="line">  constructor()&#123;</div><div class="line">    this.name=&apos;xiaoming&apos;</div><div class="line">  &#125;</div><div class="line">  sayHello()&#123;</div><div class="line">    console.log(&apos;hello&apos;)</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line">  class B extends A&#123;</div><div class="line">  constructor()&#123;</div><div class="line">    super() </div><div class="line">    this.age=12</div><div class="line">  &#125;</div><div class="line">  sayHello()&#123;</div><div class="line">    console.log(&apos;hello&apos;)</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>这是加完继承后的代码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div></pre></td><td class="code"><pre><div class="line">&apos;use strict&apos;;</div><div class="line"></div><div class="line">var _createClass = function () &#123; </div><div class="line">function defineProperties(target, props) &#123; </div><div class="line">...//和前面一样</div><div class="line"> &#125;();</div><div class="line"></div><div class="line">function _possibleConstructorReturn(self, call) &#123; if (!self) &#123;</div><div class="line">  throw new ReferenceError(&quot;this hasn&apos;t been initialised - super() hasn&apos;t been called&quot;); &#125; </div><div class="line">  return call &amp;&amp; (typeof call === &quot;object&quot; || typeof call === &quot;function&quot;) ? call : self; </div><div class="line">&#125;</div><div class="line"></div><div class="line">function _inherits(subClass, superClass) &#123; </div><div class="line">  if (typeof superClass !== &quot;function&quot; &amp;&amp; superClass !== null) &#123;</div><div class="line">    throw new TypeError(&quot;Super expression must either be null or a function,not &quot; + typeof superClass); </div><div class="line">  &#125; </div><div class="line">  subClass.prototype = Object.create(superClass &amp;&amp; superClass.prototype, &#123;</div><div class="line">  constructor: &#123;</div><div class="line">    value: subClass, </div><div class="line">    enumerable: false,</div><div class="line">    writable: true,</div><div class="line">    configurable: true </div><div class="line">  &#125;</div><div class="line"> &#125;); </div><div class="line">if (superClass) </div><div class="line">  Object.setPrototypeOf ?</div><div class="line">  Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; &#125;</div><div class="line"></div><div class="line">function _classCallCheck(instance, Constructor) &#123;</div><div class="line">  if (!(instance instanceof Constructor)) &#123; </div><div class="line">  throw new TypeError(&quot;Cannot call a class as a function&quot;);</div><div class="line">  &#125; </div><div class="line">&#125;</div><div class="line"></div><div class="line">var A = function () &#123;</div><div class="line">  function A() &#123;</div><div class="line">    _classCallCheck(this, A);</div><div class="line"></div><div class="line">    this.name = &apos;xiaoming&apos;;</div><div class="line">    this.say = function () &#123;</div><div class="line">      console.log(&quot;123&quot;);</div><div class="line">    &#125;;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  _createClass(A, [&#123;</div><div class="line">    key: &apos;sayHello&apos;,</div><div class="line">    value: function sayHello() &#123;</div><div class="line">      console.log(&apos;hello&apos;);</div><div class="line">    &#125;</div><div class="line">  &#125;]);</div><div class="line"></div><div class="line">  return A;</div><div class="line">&#125;();</div><div class="line"></div><div class="line">var B = function (_A) &#123;</div><div class="line">  _inherits(B, _A);</div><div class="line"></div><div class="line">  function B() &#123;</div><div class="line">    _classCallCheck(this, B);</div><div class="line"></div><div class="line">    var _this = _possibleConstructorReturn(this, (B.__proto__ || Object.getPrototypeOf(B)).call(this));</div><div class="line"></div><div class="line">    _this.age =12;</div><div class="line">    return _this;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  _createClass(B, [&#123;</div><div class="line">    key: &apos;sayHello&apos;,</div><div class="line">    value: function sayHello() &#123;</div><div class="line">      console.log(&apos;hello&apos;);</div><div class="line">    &#125;</div><div class="line">  &#125;]);</div><div class="line"></div><div class="line">  return B;</div><div class="line">&#125;(A);</div></pre></td></tr></table></figure></p>
<p>代码很长,都不用看，只看_inherits这个函数，从这一句<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">subClass.prototype = Object.create(superClass &amp;&amp; superClass.prototype, &#123;</div><div class="line">  constructor: &#123; </div><div class="line">    value: subClass, </div><div class="line">    enumerable: false, </div><div class="line">    writable: true, </div><div class="line">    configurable: true </div><div class="line">  &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>这里有个小技巧，&amp;&amp;当计算前面为false时，就不计算后面的表达式了，当然返回的是false或者最后一个值，这是从左向右计算的，这里意思就是如果 superClass 存在，那就计算 superClass.prototype，当然也就是存在的，这一句就是将B的原型设为一个以 A 的 prototype 为原型的对象，也就是说<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">B.prototype.__proto__=A.prototype</div></pre></td></tr></table></figure></p>
<h2 id="proto-VS-prototype"><a href="#proto-VS-prototype" class="headerlink" title="proto _ VS prototype"></a><strong>proto</strong> _ VS prototype</h2><p>这里<code>__proto__</code>这个属性是每个对象都有的，就是因为这个属性的存在，对象可以继承很多不是他自己的属性或方法，比如<code>toString()</code>。虽然<code>toString()</code>不是这个对象自己的方法，但是去调用一个对象的这个方法时，这个对象自己没有，就会去找这个对象的<code>__proto__</code>，在它的<code>__proto__</code>所指向的对象中去找，如果找不到，就会继续去在这个<code>__proto__</code>的<code>__proto__</code>中去找，这就形成了一个原型链，直到找到为止，找不到就会报错。<br>而<code>prototype</code>和<code>__proto__</code>之间的区别很明显，<code>prototype</code>是函数对象所特有的，他作为一个属性指向另一个对象，即这个函数的原型对象，它存在的目的只是为了生产对象，通过这个函数new出来的对象都有一个<code>__proto__</code>属性指向这个函数的原型对象，从下面代码就可以看出来<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">function A()&#123;</div><div class="line">  this.name=&apos;xiaoming&apos;</div><div class="line">&#125;</div><div class="line">A.prototype=&#123;</div><div class="line">  sayhi:function()&#123;</div><div class="line">    console.log(&apos;hi&apos;)</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line">var a=new A();</div><div class="line">console.log(a.__proto__===A.prototype)</div><div class="line">// true</div></pre></td></tr></table></figure></p>
<p>也就是说，对象的<code>__proto__</code>属性指向那个制造这个对象的构造函数的原型对象，通过对象字面量形式创建的对象的<code>__proto__</code>就是<code>Object.prototype</code>,<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">o = &#123;&#125;;// 以字面量方式创建的空对象就相当于:</div><div class="line">o = Object.create(Object.prototype);</div></pre></td></tr></table></figure></p>
<p>那么继续之前的话题，<code>_inherits</code>函数中有这一句<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">if (superClass) </div><div class="line">Object.setPrototypeOf ? </div><div class="line">Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;</div></pre></td></tr></table></figure></p>
<p>这样子类的<code>__proto__</code>就指向了父类，就将原型链头指向了父类，也就是在B中可以使用A的方法和属性，注意是在B这个构造函数内，B的原型对象在之前的代码已经解释了，通过<code>Object.create</code>方法把B的原型对象绑定到了A的原型上，B的原型对象可以通过原型链原型继承使用A的原型对象的属性和方法。<br>总之最后的情况是这样的<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">B.__proto__=A</div><div class="line">B.prototype=对象xx</div><div class="line">对象xx:&#123;</div><div class="line">__proto__:A.prototype</div><div class="line">constructor:B</div><div class="line">...</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>当使用new去创建一个B的实例b时会发生这样的过程<br>在constructor中会得到以this.xx，比如this.age this.age…<br>等等还有一个不能忘了在B的构造函数中会有个super()，这样A的构造函数也会执行了，不然没有name属性<br>然后就是将这个对象的<code>__proto__</code>指向那个对象xx，也就是B这个构造函数的原型对象，这样就能访问这个原型链上的属性和方法了。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>新版本的类也是基于原型继承的，所以只要把基础打好了，遇到新的东西也理解的比较清楚，class中constructor对应的还是以前的构造函数，整个类里面的内容就是这个构造函数的原型对象的内容，如果有继承还要加上继承的对象的内容，我们依然可以用类名<code>xx</code>来指代以前的构造函数，<code>xx.prototype</code>来指代原型对象。新的语法形式，对外隐藏了实现的细节，写起来更加简洁，还有会在不正当时使用时的错误提示。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;新一代标准已经提出有些日子了，最近在写react的时候，react用了大量的class的语法去写组件，对于class的理解不是很深刻，于是这里把从babel转换的代码分享给大家。&lt;/p&gt;
&lt;h2 id=&quot;类-构造函数-原型&quot;&gt;&lt;a href=&quot;#类-构造函数-原型&quot; cla
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>webpack文件目录详解</title>
    <link href="http://physihan.github.io/2016/11/09/webpack%E6%96%87%E4%BB%B6%E7%9B%AE%E5%BD%95%E8%AF%A6%E8%A7%A3/"/>
    <id>http://physihan.github.io/2016/11/09/webpack文件目录详解/</id>
    <published>2016-11-09T12:09:15.000Z</published>
    <updated>2016-11-09T12:11:13.947Z</updated>
    
    <content type="html"><![CDATA[<p>最近想学一门前端框架，之前看了一些Angular1的教程，难学就不说了，它的主人好像有了放弃他的意思，推出了Angular2，基本上算是推翻了重来，而且文档还要越过GFW才能看，最近特别火的React也不错，但是最后还是选了文档十分友好的Vue,它借鉴了Angular1的指令和React组件化思想，在2.0版本中还加入了virtual DOM。</p>
<p>这是一个<strong>渐进式框架</strong>，不同于jquery的直接操作dom，它是数据驱动的，Vue 的核心库只关注视图层，是一个轻量级的框架，可以和其他库相整合。废话不多说，大家可以去这个<a href="https://vuefe.cn/guide/" target="_blank" rel="external">网站</a>去看它的详细文档。</p>
<p>实践才能真正掌握它，vue可以像jquery一样通过<code>&lt;script&gt;</code>标签的方式写到html中，现在前端技术日新月异，在我看来，如果现在学习的话还不用新的东西，还要学老一套的，迟早要被淘汰，这里我使用的是vue-cli，使用webpack来搭建这个项目，对于webpack的介绍请看<a href="http://webpackdoc.com/" target="_blank" rel="external">这里</a>，总之它非常好用，也是我要学习它的原因，这个脚手架工具，这有vue-cli的<a href="https://vuefe.cn/guide/" target="_blank" rel="external">安装方法</a>，当然最简单的方法就是从github上直接copy下来，这里是<a href="https://github.com/physihan/vue-example" target="_blank" rel="external">连接</a>，下载下来后在解压后的文件夹内安装依赖<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install</div></pre></td></tr></table></figure></p>
<p>最后的文件目录是这样的<br><a id="more"></a><br><img src="http://upload-images.jianshu.io/upload_images/2581327-6275a19306ae43ac.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="vue 示例"><br>下面就开始分析这些目录中的这些文件<br>首先要说的是<code>package.json</code>这个文件，这是整个文件的灵魂啊，<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  &quot;name&quot;: &quot;example&quot;,                                          </div><div class="line">  &quot;version&quot;: &quot;1.0.0&quot;,                                            </div><div class="line">  &quot;description&quot;: &quot;A Vue.js project&quot;,</div><div class="line">  &quot;author&quot;: &quot;xxx&quot;,</div><div class="line">  &quot;private&quot;: true,</div><div class="line">  &quot;scripts&quot;: &#123;</div><div class="line">    &quot;dev&quot;: &quot;node build/dev-server.js&quot;,</div><div class="line">    &quot;build&quot;: &quot;node build/build.js&quot;,</div><div class="line">    &quot;lint&quot;: &quot;eslint --ext .js,.vue src&quot;</div><div class="line">  &#125;,</div><div class="line">  &quot;dependencies&quot;: &#123;</div><div class="line">    //真的依赖。。</div><div class="line">    &quot;vue&quot;: &quot;^2.0.1&quot;</div><div class="line">  &#125;,</div><div class="line">  &quot;devDependencies&quot;: &#123;</div><div class="line">   //太多省略了</div><div class="line">   //这里是开发时的依赖</div><div class="line">  &#125;,</div><div class="line">  &quot;engines&quot;: &#123;</div><div class="line">    &quot;node&quot;: &quot;&gt;= 4.0.0&quot;,</div><div class="line">    &quot;npm&quot;: &quot;&gt;= 3.0.0&quot;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>这个文件是可以通过<code>npm init</code>控制行命令生成，前提是你电脑得装了node，如果没有的话，这篇文章可以先不用看了，先去装个node吧。</p>
<p><code>package.json</code>这个文件是json格式的文件，它的每一个键值对，储存了这个项目的数据， <code>&quot;dependencies&quot;</code>和<code>&quot;devDependencies&quot;</code>是这个项目所要用到的依赖包，什么是依赖包呢，就拿就jquery和bootstrap说吧，要想使用bootstrap就要先引入jquery，而这就产生了依赖关系，webpack可以将所要用到的各种资源文件包括js、css等文件打包，好处就是将繁杂的资源引用打包，减少http请求数，压缩资源存储空间，加快网页访问速度。</p>
<p>回到这个文件，<code>&quot;dependencies&quot;</code>主要是网页所要用到的依赖包，我们演示的是vue示例，当然就有<code>&quot;vue&quot;: &quot;^2.0.1&quot;</code>这一条了，后面的是依赖包的版本号；而<code>&quot;devDependencies&quot;</code>是开发时的包依赖，比如我们要想在js配置文件中使用es6的语法就需要引用barbel依赖，要模拟服务器就要使用express模块等等，但是他们只是开发的时候用，资源打包编译过后就不用这些组件或模块了，因此写在<code>&quot;devDependencies&quot;</code>下边。</p>
<p>node是一个js的运行环境，npm是随着node一起安装的包管理工具，正确装完node之后就可以使用命令行指令了，通过node指令可以执行js文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ node xx.js          //执行某文件</div></pre></td></tr></table></figure></p>
<p>而npm指令可以执行<code>package.json</code>里定义的相关操作<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&quot;scripts&quot;: &#123; </div><div class="line">&quot;dev&quot;: &quot;node build/dev-server.js&quot;, </div><div class="line">&quot;build&quot;: &quot;node build/build.js&quot;, </div><div class="line">&quot;lint&quot;: &quot;eslint --ext .js,.vue src&quot; </div><div class="line">&#125;,</div></pre></td></tr></table></figure></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">$ npm installl          </div><div class="line">//把dependencies和devDependencies中的依赖下载安装到node_modules文件夹</div><div class="line">$ npm run-script dev</div><div class="line">//也可以这么写</div><div class="line">$ npm run dev</div><div class="line">//执行package.json中的dev这个指令，在这里等同于</div><div class="line">$ node build/dev-server.js</div><div class="line">//这里可以自己随便写，引号里的是要在命令行执行的指令</div></pre></td></tr></table></figure>
<p>打开文件夹，在这个文件下打开命令行，<code>shift</code>+鼠标右键打开命令行</p>
<p><img src="http://upload-images.jianshu.io/upload_images/2581327-1ea3968051206385.gif?imageMogr2/auto-orient/strip" alt="演示.gif"></p>
<p>我们执行<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm run dev</div></pre></td></tr></table></figure></p>
<p>这样就成功的在浏览器中显示了<br>可是对这个过程是怎么实现的依然一头雾水</p>
<h2 id="build文件夹"><a href="#build文件夹" class="headerlink" title="build文件夹"></a>build文件夹</h2><p>那我们就从这个指令开始吧<code>$ npm run dev</code>，之前说了，这个指令就是执行这个目录build/下的dev-server.js文件<br>build文件目录是这样的<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">|-build</div><div class="line">    |-build.js</div><div class="line">    |-check-versions.js</div><div class="line">    |-dev-client.js</div><div class="line">    |-dev-server.js</div><div class="line">    |-utils.js</div><div class="line">    |-webpack.base.conf.js</div><div class="line">    |-webpack.dev.conf.js</div><div class="line">    |-webpack.prod.conf.js</div></pre></td></tr></table></figure></p>
<p>（瞬间感觉压力巨大，但是本着不能轻言放弃的原则，我会坚持下去的）<br>打开<code>dev-server.js</code>这个文件，有点大，如果你能一条条读下来，相信会收获很多的<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div></pre></td><td class="code"><pre><div class="line">require(&apos;./check-versions&apos;)()</div><div class="line">//这里是将package.json中的engine要求的node，npm版本号和本地版本相比对</div><div class="line">//如果不符合就会在命令行用红色和绿色的文字发出警告</div><div class="line">var config = require(&apos;../config&apos;)</div><div class="line">//引入另一个文件夹config的index.js总之是一些配置组成的对象</div><div class="line">if (!process.env.NODE_ENV) process.env.NODE_ENV = config.dev.env</div><div class="line">//process是nodejs中的一个全局对象，可以看作一个进程，这个procee.env中保存着当前shell的环境变量</div><div class="line">//这里是如果这个环境变量中没有NODE_ENV这个属性，就将它的值设为开发模式development，相对的还有生产模式production</div><div class="line">var path = require(&apos;path&apos;)</div><div class="line">//这是node里的自带模块，用来处理相对路径绝对路径等</div><div class="line">var express = require(&apos;express&apos;)</div><div class="line">//这是一个基于nodejs的开发框架，可以搭建开发环境下的服务器</div><div class="line">var webpack = require(&apos;webpack&apos;)</div><div class="line">//资源打包模块</div><div class="line">var opn = require(&apos;opn&apos;)</div><div class="line">//一个用来打开网页、文件、可执行文件的模块</div><div class="line">var proxyMiddleware = require(&apos;http-proxy-middleware&apos;)</div><div class="line">//服务器中间件，匹配对应请求的的URL地址, 匹配的请求将被代理到目标主机</div><div class="line">var webpackConfig = require(&apos;./webpack.dev.conf&apos;)</div><div class="line">//在大型项目中，可能 webpack.config.js 会变得越来越臃肿，这个时候可以</div><div class="line">//利用做 webpack-merge 插件。将配置定义在一个目录下面的不同文件中</div><div class="line">//然后通过 webpack-merge 来合并成最终的配置。</div><div class="line">var port = process.env.PORT || config.dev.port</div><div class="line">// 设置端口号</div><div class="line">var proxyTable = config.dev.proxyTable</div><div class="line">//代理表，可以将复杂的url简写</div><div class="line">var app = express()</div><div class="line">//实例化一个express</div><div class="line">var compiler = webpack(webpackConfig)</div><div class="line">//实例化一个compiler</div><div class="line">var devMiddleware = require(&apos;webpack-dev-middleware&apos;)(compiler, &#123;</div><div class="line">  publicPath: webpackConfig.output.publicPath,</div><div class="line">  stats: &#123;</div><div class="line">    colors: true,</div><div class="line">    chunks: false</div><div class="line">  &#125;</div><div class="line">&#125;)</div><div class="line"></div><div class="line">var hotMiddleware = require(&apos;webpack-hot-middleware&apos;)(compiler)</div><div class="line">// force page reload when html-webpack-plugin template changes</div><div class="line">compiler.plugin(&apos;compilation&apos;, function (compilation) &#123;</div><div class="line">  compilation.plugin(&apos;html-webpack-plugin-after-emit&apos;, function (data, cb) &#123;</div><div class="line">    hotMiddleware.publish(&#123; action: &apos;reload&apos; &#125;)</div><div class="line">    cb()</div><div class="line">  &#125;)</div><div class="line">&#125;)</div><div class="line"></div><div class="line">// proxy api requests</div><div class="line">Object.keys(proxyTable).forEach(function (context) &#123;</div><div class="line">  var options = proxyTable[context]</div><div class="line">  if (typeof options === &apos;string&apos;) &#123;</div><div class="line">    options = &#123; target: options &#125;</div><div class="line">  &#125;</div><div class="line">  app.use(proxyMiddleware(context, options))</div><div class="line">&#125;)</div><div class="line"></div><div class="line">// handle fallback for HTML5 history API</div><div class="line">app.use(require(&apos;connect-history-api-fallback&apos;)())</div><div class="line"></div><div class="line">// serve webpack bundle output</div><div class="line">app.use(devMiddleware)</div><div class="line"></div><div class="line">// enable hot-reload and state-preserving</div><div class="line">// compilation error display</div><div class="line">app.use(hotMiddleware)</div><div class="line"></div><div class="line">// serve pure static assets</div><div class="line">var staticPath = path.posix.join(config.dev.assetsPublicPath, config.dev.assetsSubDirectory)</div><div class="line">app.use(staticPath, express.static(&apos;./static&apos;))</div><div class="line"></div><div class="line">module.exports = app.listen(port, function (err) &#123;</div><div class="line">  if (err) &#123;</div><div class="line">    console.log(err)</div><div class="line">    return</div><div class="line">  &#125;</div><div class="line">  var uri = &apos;http://localhost:&apos; + port</div><div class="line">  console.log(&apos;Listening at &apos; + uri + &apos;\n&apos;)</div><div class="line"></div><div class="line">  // when env is testing, don&apos;t need open it</div><div class="line">  if (process.env.NODE_ENV !== &apos;testing&apos;) &#123;</div><div class="line">    opn(uri)</div><div class="line">  &#125;</div><div class="line">&#125;)</div></pre></td></tr></table></figure></p>
<p>打开<code>build.js</code>这个文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line">// https://github.com/shelljs/shelljs</div><div class="line">require(&apos;./check-versions&apos;)()</div><div class="line">//这里是将package.json中的engine要求的node，npm版本号和本地版本相比对，如果不符合就会在命令行用红色和绿色的文字发出警告</div><div class="line">require(&apos;shelljs/global&apos;)</div><div class="line">//可以在js文件中使用unix命令，比如mkdir、rm、cp</div><div class="line">env.NODE_ENV = &apos;production&apos;</div><div class="line">//这个</div><div class="line">var path = require(&apos;path&apos;)</div><div class="line">var config = require(&apos;../config&apos;)</div><div class="line">var ora = require(&apos;ora&apos;)</div><div class="line">var webpack = require(&apos;webpack&apos;)</div><div class="line">var webpackConfig = require(&apos;./webpack.prod.conf&apos;)</div><div class="line"></div><div class="line">console.log(</div><div class="line">  &apos;  Tip:\n&apos; +</div><div class="line">  &apos;  Built files are meant to be served over an HTTP server.\n&apos; +</div><div class="line">  &apos;  Opening index.html over file:// won\&apos;t work.\n&apos;</div><div class="line">)</div><div class="line"></div><div class="line">var spinner = ora(&apos;building for production...&apos;)</div><div class="line">spinner.start()</div><div class="line"></div><div class="line">var assetsPath = path.join(config.build.assetsRoot, config.build.assetsSubDirectory)</div><div class="line">rm(&apos;-rf&apos;, assetsPath)</div><div class="line">mkdir(&apos;-p&apos;, assetsPath)</div><div class="line">cp(&apos;-R&apos;, &apos;static/*&apos;, assetsPath)</div><div class="line"></div><div class="line">webpack(webpackConfig, function (err, stats) &#123;</div><div class="line">  spinner.stop()</div><div class="line">  if (err) throw err</div><div class="line">  process.stdout.write(stats.toString(&#123;</div><div class="line">    colors: true,</div><div class="line">    modules: false,</div><div class="line">    children: false,</div><div class="line">    chunks: false,</div><div class="line">    chunkModules: false</div><div class="line">  &#125;) + &apos;\n&apos;)</div><div class="line">&#125;)</div></pre></td></tr></table></figure></p>
<h2 id="build文件夹-1"><a href="#build文件夹-1" class="headerlink" title="build文件夹"></a>build文件夹</h2><p>这个文件夹里的文件是和编译相关的</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近想学一门前端框架，之前看了一些Angular1的教程，难学就不说了，它的主人好像有了放弃他的意思，推出了Angular2，基本上算是推翻了重来，而且文档还要越过GFW才能看，最近特别火的React也不错，但是最后还是选了文档十分友好的Vue,它借鉴了Angular1的指令和React组件化思想，在2.0版本中还加入了virtual DOM。&lt;/p&gt;
&lt;p&gt;这是一个&lt;strong&gt;渐进式框架&lt;/strong&gt;，不同于jquery的直接操作dom，它是数据驱动的，Vue 的核心库只关注视图层，是一个轻量级的框架，可以和其他库相整合。废话不多说，大家可以去这个&lt;a href=&quot;https://vuefe.cn/guide/&quot;&gt;网站&lt;/a&gt;去看它的详细文档。&lt;/p&gt;
&lt;p&gt;实践才能真正掌握它，vue可以像jquery一样通过&lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt;标签的方式写到html中，现在前端技术日新月异，在我看来，如果现在学习的话还不用新的东西，还要学老一套的，迟早要被淘汰，这里我使用的是vue-cli，使用webpack来搭建这个项目，对于webpack的介绍请看&lt;a href=&quot;http://webpackdoc.com/&quot;&gt;这里&lt;/a&gt;，总之它非常好用，也是我要学习它的原因，这个脚手架工具，这有vue-cli的&lt;a href=&quot;https://vuefe.cn/guide/&quot;&gt;安装方法&lt;/a&gt;，当然最简单的方法就是从github上直接copy下来，这里是&lt;a href=&quot;https://github.com/physihan/vue-example&quot;&gt;连接&lt;/a&gt;，下载下来后在解压后的文件夹内安装依赖&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;$ npm install&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;最后的文件目录是这样的&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>客户端存储</title>
    <link href="http://physihan.github.io/2016/11/07/%E5%AE%A2%E6%88%B7%E7%AB%AF%E5%AD%98%E5%82%A8/"/>
    <id>http://physihan.github.io/2016/11/07/客户端存储/</id>
    <published>2016-11-07T02:30:14.000Z</published>
    <updated>2016-11-07T05:18:47.000Z</updated>
    
    <content type="html"><![CDATA[<p>使用客户端存储实现存储用户的偏好和状态信息</p>
<h2 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h2><p>在制作网页app时，为了更好地去提升客户的使用体验，需要去保存客户的一些信息，比如用户登陆的时候输入的密码、用户喜欢的页面风格啊（很多都是存在服务器上的），由于客户端存储遵循着<strong>同源策略</strong>，不同站点的页面是不可以相互读取数据，但是同一站点的不同页面之间是可以进行数据通信的，这样前一个页面的表单数据就可以在另一个页面显示了。</p>
<p>作为web应用开发者，使用这些客户端存储技术是为了更好提升用户体验，如果是要开发需要迫不得已将隐私数据存在客户端机器上，要设置数据的有效期，这个数据可以保留至当前窗口关闭之前，或者是浏览器关闭之前。客户端存储的数据甚至是可以长期存在，也可以永久保存，要正确使用这个功能，不能给用户留下隐患。<br><a id="more"></a><br>常见的客户端存储分为以下这几种</p>
<ul>
<li>Web存储</li>
<li>cookie</li>
<li>IE User Data</li>
<li>离线web应用</li>
<li>Web数据库</li>
<li>文件系统API<h3 id="Web存储"><a href="#Web存储" class="headerlink" title="Web存储"></a>Web存储</h3>随着html5的广泛应用，Web存储这种形式在支持html5的浏览器中都可以去使用，所谓的Web存储，就是在浏览器的window对象上定义了两个对象属性，他俩的区别就在于存储的有效期不同，使用方式基本一致，<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">sessionStorage.x=5;</div><div class="line">sessionStorage.y=&quot;hello web storage&quot;</div><div class="line">sessionStorage.z=&#123;</div><div class="line">name:&quot;sessionStorage&quot;,</div><div class="line">say:function()&#123;</div><div class="line">alert(&quot;hello&quot;)</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">console.log(sessionStorage)</div></pre></td></tr></table></figure>
</li>
</ul>
<p>就把他当成一个对象用就好了,可惜的是<strong>目前还不支持对象和数组类型的数据存储</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Storage &#123;x: &quot;5&quot;, y: &quot;hello web storage&quot;, z: &quot;[object Object]&quot;, length: 3&#125;</div></pre></td></tr></table></figure></p>
<p>sessionStorage和localStorage的作用域是同源的，一个网页的文档源是很严格的，同源要求url的协议、主机名、端口号都一致。<br>下面这些都是不同的源<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">http://www.example.com            //协议http；主机名www.example.com</div><div class="line">https://www.exsample.com          //不同协议</div><div class="line">http://static.example.com         //不同主机名</div><div class="line">http://www.example.com:8000       //不同端口</div></pre></td></tr></table></figure></p>
<p>在同一个源的sessionStorage和localStorage是相同的，sessionStorage的有效期和这个标签页或者这个页面的顶层窗口是一致的，而localStorage的数据是永久存储在本地的，除非通过浏览器刻意的去删除。这两个对象还提供了存储和查询的API<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">localStorage.setItem(<span class="string">"x"</span>,<span class="number">1</span>);  <span class="comment">//这里的是逗号分隔的两个参数，以x为名存储一个数值</span></div><div class="line">localStorage.getItem(<span class="string">"x"</span>);    <span class="comment">//获取值</span></div><div class="line">localStorage.key(<span class="number">0</span>);          <span class="comment">//第一个名值对的名字</span></div><div class="line">localStorage.clear();         <span class="comment">//清除所有存储的数据</span></div></pre></td></tr></table></figure></p>
<h3 id="cookie"><a href="#cookie" class="headerlink" title="cookie"></a>cookie</h3><p>对于不能使用Web存储的浏览器，cookie也是一个很好的选择，因为它提出的很早，现在几乎所有浏览器都支持使用cookie，常见的使用cookie的地方就是定向广告，比如百度会根据你平时的搜索内容设置成cookie存在你的电脑上，在有些网站的广告栏会根据你的喜好投入广告（其实这样会泄露隐私的。。），可以在浏览器中清除cookie，这样还是有广告，但是已经不是没有个性化广告了哈哈。</p>
<p>和前面所说的Web存储差不多，cookie的作用域是通过文档源和文档路径来确定的，默认情况下，如果不去设置cookie的path和domain属性，那么只有同在一个目录或者这个目录的子目录可见<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">http://www.xxxx.com/yyy                 //在这个页面设置的cookie，未设置path和domain</div><div class="line">http://www.xxxx.com/yyy                 //同目录可以访问</div><div class="line">http://www.xxxx.com/yyy/zzz             //子目录可以访问</div><div class="line">http://www.xxxx.com/yyy/aaa             //子目录可以访问</div><div class="line">http://www.xxxx.com/yyy/zzz/asd         //子目录可以访问</div><div class="line">http://www.xxxx.com/xxx                 //不可访问</div></pre></td></tr></table></figure></p>
<p>下面来说说如何去设置cookie的path和domain属性，path就是文件路径，是上面<code>www.xxxx.com</code>后面的部分,在任何一个路径下设置cookie，如果path设置为<code>/yyy</code>，那么只有<code>/yyy</code>及以下目录可以访问，设置为<code>/</code>就是这个<code>www.xxxx.com</code>域名下的所有目录都可以访问，这就和localStorage和sessionStorage的作用域一样了，除此之外还可以设置domain属性，设置成<code>.xxxx.com</code>,再设置path为<code>/</code>,那就对所有<code>.xxxx.com</code>的子域都有访问权限了。</p>
<p>cookie作为document对象的一个属性，它存储的是一串字符串，以<code>;</code>分隔开，<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">document</span>.cookie = <span class="string">"name=oeschger"</span>;</div><div class="line"><span class="built_in">document</span>.cookie = <span class="string">"favorite_food=tripe"</span>;</div><div class="line">alert(<span class="built_in">document</span>.cookie);</div><div class="line"><span class="comment">// 显示: name=oeschger;favorite_food=tripe</span></div></pre></td></tr></table></figure></p>
<p>cookie的使用特别麻烦，需要处理这些字符串，一般都会封装成函数去保存和读取这些cookie，下面是摘自<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Document/cookie" target="_blank" rel="external">https://developer.mozilla.org/zh-CN/docs/Web/API/Document/cookie</a> 的封装<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*\</span></div><div class="line">|*|</div><div class="line">|*|  :: cookies.js ::</div><div class="line">|*|</div><div class="line">|*|  A complete cookies reader/writer framework with full unicode support.</div><div class="line">|*|</div><div class="line">|*|  https://developer.mozilla.org/en-US/docs/DOM/document.cookie</div><div class="line">|*|</div><div class="line">|*|  This framework is released under the GNU Public License, version 3 or later.</div><div class="line">|*|  http://www.gnu.org/licenses/gpl-3.0-standalone.html</div><div class="line">|*|</div><div class="line">|*|  Syntaxes:</div><div class="line">|*|</div><div class="line">|*|  * docCookies.setItem(name, value[, end[, path[, domain[, secure]]]])</div><div class="line">|*|  * docCookies.getItem(name)</div><div class="line">|*|  * docCookies.removeItem(name[, path], domain)</div><div class="line">|*|  * docCookies.hasItem(name)</div><div class="line">|*|  * docCookies.keys()</div><div class="line">|*|</div><div class="line">\*/</div><div class="line"></div><div class="line"><span class="keyword">var</span> docCookies = &#123;</div><div class="line">  <span class="attr">getItem</span>: <span class="function"><span class="keyword">function</span> (<span class="params">sKey</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="built_in">decodeURIComponent</span>(<span class="built_in">document</span>.cookie.replace(<span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">"(?:(?:^|.*;)\\s*"</span> + <span class="built_in">encodeURIComponent</span>(sKey).replace(<span class="regexp">/[\-\.\+\*]/g</span>, <span class="string">"\\$&amp;"</span>) + <span class="string">"\\s*\\=\\s*([^;]*).*$)|^.*$"</span>), <span class="string">"$1"</span>)) || <span class="literal">null</span>;</div><div class="line">  &#125;,</div><div class="line">  <span class="attr">setItem</span>: <span class="function"><span class="keyword">function</span> (<span class="params">sKey, sValue, vEnd, sPath, sDomain, bSecure</span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span> (!sKey || <span class="regexp">/^(?:expires|max\-age|path|domain|secure)$/i</span>.test(sKey)) &#123; <span class="keyword">return</span> <span class="literal">false</span>; &#125;</div><div class="line">    <span class="keyword">var</span> sExpires = <span class="string">""</span>;</div><div class="line">    <span class="keyword">if</span> (vEnd) &#123;</div><div class="line">      <span class="keyword">switch</span> (vEnd.constructor) &#123;</div><div class="line">        <span class="keyword">case</span> <span class="built_in">Number</span>:</div><div class="line">          sExpires = vEnd === <span class="literal">Infinity</span> ? <span class="string">"; expires=Fri, 31 Dec 9999 23:59:59 GMT"</span> : <span class="string">"; max-age="</span> + vEnd;</div><div class="line">          <span class="keyword">break</span>;</div><div class="line">        <span class="keyword">case</span> <span class="built_in">String</span>:</div><div class="line">          sExpires = <span class="string">"; expires="</span> + vEnd;</div><div class="line">          <span class="keyword">break</span>;</div><div class="line">        <span class="keyword">case</span> <span class="built_in">Date</span>:</div><div class="line">          sExpires = <span class="string">"; expires="</span> + vEnd.toUTCString();</div><div class="line">          <span class="keyword">break</span>;</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">document</span>.cookie = <span class="built_in">encodeURIComponent</span>(sKey) + <span class="string">"="</span> + <span class="built_in">encodeURIComponent</span>(sValue) + sExpires + (sDomain ? <span class="string">"; domain="</span> + sDomain : <span class="string">""</span>) + (sPath ? <span class="string">"; path="</span> + sPath : <span class="string">""</span>) + (bSecure ? <span class="string">"; secure"</span> : <span class="string">""</span>);</div><div class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">  &#125;,</div><div class="line">  <span class="attr">removeItem</span>: <span class="function"><span class="keyword">function</span> (<span class="params">sKey, sPath, sDomain</span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span> (!sKey || !<span class="keyword">this</span>.hasItem(sKey)) &#123; <span class="keyword">return</span> <span class="literal">false</span>; &#125;</div><div class="line">    <span class="built_in">document</span>.cookie = <span class="built_in">encodeURIComponent</span>(sKey) + <span class="string">"=; expires=Thu, 01 Jan 1970 00:00:00 GMT"</span> + ( sDomain ? <span class="string">"; domain="</span> + sDomain : <span class="string">""</span>) + ( sPath ? <span class="string">"; path="</span> + sPath : <span class="string">""</span>);</div><div class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">  &#125;,</div><div class="line">  <span class="attr">hasItem</span>: <span class="function"><span class="keyword">function</span> (<span class="params">sKey</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> (<span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">"(?:^|;\\s*)"</span> + <span class="built_in">encodeURIComponent</span>(sKey).replace(<span class="regexp">/[\-\.\+\*]/g</span>, <span class="string">"\\$&amp;"</span>) + <span class="string">"\\s*\\="</span>)).test(<span class="built_in">document</span>.cookie);</div><div class="line">  &#125;,</div><div class="line">  <span class="attr">keys</span>: <span class="comment">/* optional method: you can safely remove it! */</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> aKeys = <span class="built_in">document</span>.cookie.replace(<span class="regexp">/((?:^|\s*;)[^\=]+)(?=;|$)|^\s*|\s*(?:\=[^;]*)?(?:\1|$)/g</span>, <span class="string">""</span>).split(<span class="regexp">/\s*(?:\=[^;]*)?;\s*/</span>);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> nIdx = <span class="number">0</span>; nIdx &lt; aKeys.length; nIdx++) &#123; aKeys[nIdx] = <span class="built_in">decodeURIComponent</span>(aKeys[nIdx]); &#125;</div><div class="line">    <span class="keyword">return</span> aKeys;</div><div class="line">  &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;使用客户端存储实现存储用户的偏好和状态信息&lt;/p&gt;
&lt;h2 id=&quot;需求&quot;&gt;&lt;a href=&quot;#需求&quot; class=&quot;headerlink&quot; title=&quot;需求&quot;&gt;&lt;/a&gt;需求&lt;/h2&gt;&lt;p&gt;在制作网页app时，为了更好地去提升客户的使用体验，需要去保存客户的一些信息，比如用户登陆的时候输入的密码、用户喜欢的页面风格啊（很多都是存在服务器上的），由于客户端存储遵循着&lt;strong&gt;同源策略&lt;/strong&gt;，不同站点的页面是不可以相互读取数据，但是同一站点的不同页面之间是可以进行数据通信的，这样前一个页面的表单数据就可以在另一个页面显示了。&lt;/p&gt;
&lt;p&gt;作为web应用开发者，使用这些客户端存储技术是为了更好提升用户体验，如果是要开发需要迫不得已将隐私数据存在客户端机器上，要设置数据的有效期，这个数据可以保留至当前窗口关闭之前，或者是浏览器关闭之前。客户端存储的数据甚至是可以长期存在，也可以永久保存，要正确使用这个功能，不能给用户留下隐患。&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>kindle资源</title>
    <link href="http://physihan.github.io/2016/11/05/kindle%E8%B5%84%E6%BA%90/"/>
    <id>http://physihan.github.io/2016/11/05/kindle资源/</id>
    <published>2016-11-05T06:47:39.000Z</published>
    <updated>2016-11-05T06:47:39.789Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>网页排版不得不提的BFC</title>
    <link href="http://physihan.github.io/2016/11/05/%E7%BD%91%E9%A1%B5%E6%8E%92%E7%89%88%E4%B8%8D%E5%BE%97%E4%B8%8D%E6%8F%90%E7%9A%84BFC/"/>
    <id>http://physihan.github.io/2016/11/05/网页排版不得不提的BFC/</id>
    <published>2016-11-05T02:18:39.000Z</published>
    <updated>2016-11-05T02:18:39.796Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>My New Post</title>
    <link href="http://physihan.github.io/2016/11/03/My-New-Post/"/>
    <id>http://physihan.github.io/2016/11/03/My-New-Post/</id>
    <published>2016-11-03T11:02:50.000Z</published>
    <updated>2016-11-05T06:22:37.025Z</updated>
    
    <content type="html"><![CDATA[<p>每一个好的前端，都会有一个拿得出手的项目，对于我们刚刚学习前端没多久的新人而言，把自己所学的东西通过写博客的方式记录下来是一个很好的方式，一来可以即学即用，巩固自己的理解，二来可以记录生活，方便以后去回顾。</p>
<p>那么，如何去创建一个自己的博客呢，这个其实很简单啊，很多网站都有博客板块，去注册了就能去写了，但是这种方式并不是十分geek，我们如果对自己的博客页面的个性化程度要求很高的话，那就得去自己动手去做一个博客了。</p>
<p>这里我使用的是github提供的<a href="https://pages.github.com/" target="_blank" rel="external">github pages</a>服务，对于小型博客群众是非常方便的，当然你首先得有一个github账号，这里怎么注册就不多说了，</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;每一个好的前端，都会有一个拿得出手的项目，对于我们刚刚学习前端没多久的新人而言，把自己所学的东西通过写博客的方式记录下来是一个很好的方式，一来可以即学即用，巩固自己的理解，二来可以记录生活，方便以后去回顾。&lt;/p&gt;
&lt;p&gt;那么，如何去创建一个自己的博客呢，这个其实很简单啊，
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://physihan.github.io/2016/11/03/hello-world/"/>
    <id>http://physihan.github.io/2016/11/03/hello-world/</id>
    <published>2016-11-03T10:43:27.927Z</published>
    <updated>2016-11-03T10:43:27.927Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
    
    </summary>
    
    
  </entry>
  
</feed>
