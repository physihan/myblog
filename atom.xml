<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>physihan的博客</title>
  <subtitle>什么都懂一点，生活更精彩一点</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://physihan.github.io/"/>
  <updated>2017-02-16T06:10:43.987Z</updated>
  <id>http://physihan.github.io/</id>
  
  <author>
    <name>physihan</name>
    <email>1095714266@qq.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>感悟</title>
    <link href="http://physihan.github.io/2017/02/16/%E6%84%9F%E6%82%9F/"/>
    <id>http://physihan.github.io/2017/02/16/感悟/</id>
    <published>2017-02-16T05:43:33.000Z</published>
    <updated>2017-02-16T06:10:43.987Z</updated>
    
    <content type="html"><![CDATA[<h3 id="取悦别人就是，事实上是取悦自己"><a href="#取悦别人就是，事实上是取悦自己" class="headerlink" title="取悦别人就是，事实上是取悦自己"></a>取悦别人就是，事实上是取悦自己</h3><p>多为别人着想不仅可以减少烦恼，同时也会让你认识更多的朋友，获得更多的快乐</p>
<h3 id="不要让自己变成改过的最大阻碍"><a href="#不要让自己变成改过的最大阻碍" class="headerlink" title="不要让自己变成改过的最大阻碍"></a>不要让自己变成改过的最大阻碍</h3><p>自己或多或少有些小毛病，不能纵容它的存在，这就像温水煮青蛙，刚开始的时候感觉没什么，<br>结果以后变成了坏习惯想要去改就很难了，习惯就不一样了，自己潜意识里认为自己一直是这样，<br>没有必要去改，这就是杜绝了自己彻底改过的想法，这就是活在了自己造的笼子里，本来都没有毛病，<br>自己一直在心里这么想，比如自己挑食，总是不断的告诉自己挑食，结果是自己害了自己，<br>根本不给自己改正的机会。应该告诉自己，我不是那样的人，我不挑食，我不内向，我不懒惰等等，<br>尝试着去走一条不同的路，去发现不同的乐趣。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;取悦别人就是，事实上是取悦自己&quot;&gt;&lt;a href=&quot;#取悦别人就是，事实上是取悦自己&quot; class=&quot;headerlink&quot; title=&quot;取悦别人就是，事实上是取悦自己&quot;&gt;&lt;/a&gt;取悦别人就是，事实上是取悦自己&lt;/h3&gt;&lt;p&gt;多为别人着想不仅可以减少烦恼，同时也
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>译文-（转）在树莓派上安装node.js</title>
    <link href="http://physihan.github.io/2016/12/21/%E8%AF%91%E6%96%87-%EF%BC%88%E8%BD%AC%EF%BC%89%E5%9C%A8%E6%A0%91%E8%8E%93%E6%B4%BE%E4%B8%8A%E5%AE%89%E8%A3%85node-js-1/"/>
    <id>http://physihan.github.io/2016/12/21/译文-（转）在树莓派上安装node-js-1/</id>
    <published>2016-12-21T04:19:46.000Z</published>
    <updated>2016-12-21T04:21:06.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="在树莓派上安装-Node-js-的指引-thisDaveJ"><a href="#在树莓派上安装-Node-js-的指引-thisDaveJ" class="headerlink" title="在树莓派上安装 Node.js 的指引 | thisDaveJ"></a>在树莓派上安装 Node.js 的指引 | thisDaveJ</h1><blockquote>
<p>本文转载自：<a href="http://www.zcfy.cc" target="_blank" rel="external">众成翻译</a><br>译者：<a href="http://www.zcfy.cc/@qhxin" target="_blank" rel="external">qhxin</a><br>链接：<a href="http://www.zcfy.cc/article/2090" target="_blank" rel="external">http://www.zcfy.cc/article/2090</a><br>原文：<a href="http://thisdavej.com/beginners-guide-to-installing-node-js-on-a-raspberry-pi/?utm_source=javascriptweekly&amp;utm_medium=email" target="_blank" rel="external">http://thisdavej.com/beginners-guide-to-installing-node-js-on-a-raspberry-pi/?utm_source=javascriptweekly&amp;utm_medium=email</a></p>
<p>这篇文章已经更新了，包涵了 Node 最近一个版本的安装，在写这篇文章的时候是 Node 7.x。</p>
</blockquote>
<p>在我们这批LTM（Learning through Making）Node.js系列教程，我们将在树莓派3或者2上准备和运行 Node。在树莓派3上，你不需要购买独立的USB Wi-Fi适配器。我专注于树莓派3和2，而不是老版本的诸如树莓派B+，因为在写这篇文章时它们是最新的型号。在树莓派3，举个例子来说，它有一个 1.2GHz 的四核 ARMv8 芯片和 1GB 的内存，相比起来，树莓派1的B+型号只有 700MHz 的单核 ARMv6 芯片以及 512MB 的内存。</p>
<p>这里提供的介绍是为在树莓派3（ARMv8）或者树莓派2（ARMv7）上安装 Node.js 准备的而不是其它的基于 ARMv6 芯片的型号，诸如树莓派1的B型号、B+型号或者树莓派0。这个安装指南的大部分应该仍然被证明对除了派2和派3以外的其它树莓派系统是有用的；然而，最后的步骤重点在于它不会在基于老 ARMv6 架构的系统上工作。</p>
<p>本教程对于任何希望成功安装树莓派2或3系统的人都是有用的，即使他们对于 Node.js 并不感兴趣，因为 Node.js 的安装发生在本教程的最后一步。但是，为什么你不想安装 Node.js呢？让我们开始吧！</p>
<h3 id="内容目录"><a href="#内容目录" class="headerlink" title="内容目录"></a>内容目录</h3><ul>
<li><p><a href="#hardware-needed">需要的硬件</a></p>
</li>
<li><p><a href="#create-image">写 Raspbian 镜像像到SD卡</a></p>
</li>
<li><p><a href="#prep-hardware">准备硬件</a></p>
</li>
<li><p><a href="#configure">配置 RasPi</a></p>
</li>
<li><p><a href="#wifi">配置 Wi-Fi</a></p>
</li>
<li><p><a href="#apply-updates">应用 Raspbian 的更新</a></p>
</li>
<li><p><a href="#remote-desktop">准备远程桌面</a></p>
</li>
<li><p><a href="#windows-file-share">在 RasPi 创建 Windows 文件共享（可选）</a></p>
</li>
<li><p><a href="#install-node">安装 Node.js</a></p>
</li>
<li><p><a href="#next-time">下一次</a></p>
</li>
</ul>
<h3 id="需要的硬件"><a href="#需要的硬件" class="headerlink" title=" 需要的硬件"></a><img src="http://p0.qhimg.com/t01a338d9df1b02a7f7.jpg" alt="树莓派"> 需要的硬件</h3><p>如果你现在没有树莓派，最简单的方法是购买一个入门套件，如亚马逊上的这一个：</p>
<ul>
<li><a href="http://www.amazon.com/gp/product/B01C6Q2GSY/ref=as_li_tl?ie=UTF8&amp;camp=1789&amp;creative=9325&amp;creativeASIN=B01C6Q2GSY&amp;linkCode=as2&amp;tag=thisdavej-20&amp;linkId=VRAGHJ2RQIMQQTVG" target="_blank" rel="external">CanaKit Raspberry Pi 3 完整的初学者套件 – 32 GB 版</a> （注：我的会员信息包括在亚马逊链接里，所以你可以，如果你想，支持这些教程而不用付出额外的消费。）</li>
</ul>
<p>我们需要以下项目来作为开始：</p>
<ul>
<li><p>树莓派3的型号B或者树莓派2的型号B（这些都是树莓派3和2的官方的名字。<strong>不要让“B”混淆你，因为还有一个老的树莓派型号B，现在实际上是“树莓派1型号B”</strong>。）</p>
</li>
<li><p>MicroSD卡（我推荐一个 CLASS10 的卡，它是 16 GB 或更高。我喜欢这个<a href="http://www.amazon.com/gp/product/B00IVPU786/ref=as_li_tl?ie=UTF8&amp;camp=1789&amp;creative=9325&amp;creativeASIN=B00IVPU786&amp;linkCode=as2&amp;tag=thisdavej-20&amp;linkId=CXW5WB6NJTW2VVAE" target="_blank" rel="external">三星 32GB Class 10 microSD card</a>。）</p>
</li>
<li><p>MicroSD 转 SD 存储卡适配器（因此，你可以使用 SD 读卡器在你的笔记本/桌面电脑写入 MicroSD 卡。如下所示，有许多的 microSD 卡供应商在购买的时候包含SD适配器。）</p>
</li>
</ul>
<p><img src="http://p0.qhimg.com/t01f42d8cf7dfc8ee2b.jpg" alt="SD 卡适配器"></p>
<ul>
<li><p>微型 USB 电源（推荐 2.5A 或者更大）为 RasPi 供电。</p>
</li>
<li><p>（仅在 RasPi 2 需要）USB WiFi 网卡（或优先以太网电缆的。我已经在树莓派上测试过这个<a href="http://www.amazon.com/gp/product/B003MTTJOY/ref=as_li_tl?ie=UTF8&amp;camp=1789&amp;creative=9325&amp;creativeASIN=B003MTTJOY&amp;linkCode=as2&amp;tag=thisdavej-20&amp;linkId=RZGOFLPTQIH5ASNB" target="_blank" rel="external">Edimax USB WiFi 网卡</a>，并且它工作得非常好。这是一个它在亚马逊畅销的原因。）在树莓派3上因为有内置 Wi-Fi 所以不需要它。</p>
</li>
<li><p>Windows 笔记本电脑/台式机（Linux 或者 Mac 也能极好的工作，但是本教程面向Windows机器，所以一些读者将需要调整）</p>
</li>
<li><p>HDMI显示器、USB键盘/鼠标（你可以从另一个系统暂时借用这些设备，然后运行你的 RasPi 在无外设模式，稍后我会解释。）</p>
</li>
</ul>
<p>一旦你收集所需的硬件，我们准备好了让我们的 RasPi 苏醒了！</p>
<h3 id="将-Raspbian-镜像写入-SD-卡"><a href="#将-Raspbian-镜像写入-SD-卡" class="headerlink" title="将 Raspbian 镜像写入 SD 卡"></a>将 Raspbian 镜像写入 SD 卡</h3><p>我们将运行 Raspbian，这是一个基于 Debian Linux 的免费操作系统并且为树莓派做了优化。<br>让我们开始吧：</p>
<ul>
<li><p>从 <a href="https://www.raspberrypi.org/downloads/raspbian/" target="_blank" rel="external">https://www.raspberrypi.org/downloads/raspbian/</a> 下载最新的 Raspbian 镜像。请下载完整版本，而不是“精简”版。下载的是一个ZIP文件，约1.5 GB，所以它可能需要一些时间下载，这取决于你的互联网连接速度。</p>
</li>
<li><p>插入microSD卡到SD适配器，就像在上面的三星示例图片所示的那样。</p>
</li>
<li><p>将 SD 卡适配器插到笔记本电脑/桌面电脑的 SD读卡器。确保它很好的连接固定了。</p>
</li>
<li><p>启动Windows资源管理器，并验证SD卡作为驱动器在您的系统上注册。请注意驱动器盘符，因为你很快将需要它。</p>
</li>
<li><p>下载并安装 <a href="https://www.etcher.io/" target="_blank" rel="external">Etcher</a>。Etcher是一个跨平台（Windows，OS X，Linux）的闪存镜像到SD卡的工具。它有许多很棒的功能，包括一个简单的用户界面、闪存镜像而不需要解压zip文件的能力、以及一个验证步骤用于验证SD卡镜像是否正确写入SD卡。</p>
</li>
<li><p>（对于 Windows 用户来说有一个可供替代的选择，你可以使用 <a href="https://sourceforge.net/projects/win32diskimager/" target="_blank" rel="external">Win32 磁盘镜像</a>，因为它也提供了读取SD卡、并创建一个镜像文件的能力，这对于创建树莓派系统的快照是很方便的，如果需要的话，这个快照也可以被闪存回SD卡。对于Win32 磁盘镜像，你需要在往你的正确的SD卡盘符烧写.img文件之前，先解压这个下载的zip文件）</p>
</li>
<li><p>启动 Etcher。要有耐心，Etcher 需要数秒启动。启动后，界面看起来像这样：</p>
</li>
</ul>
<p><img src="http://p0.qhimg.com/t015ca75f4f066ea170.png" alt="etcher"></p>
<ul>
<li><p>点击 Select image（选择镜像）按钮，找到你下载的 Raspbian 的 zip 文件。（在烧写之前不需要解压。）</p>
</li>
<li><p>点击 Select drive（选择驱动器）按钮，指定 SD 卡的目标设备位置。</p>
</li>
</ul>
<p>警告：请确定你选择了正确的目标设备，否则你会将镜像写入到你系统的另一个驱动器，这将是不妙的。</p>
<ul>
<li><p>点击 Flash 按钮，将镜像写到 SD 卡上。</p>
</li>
<li><p>如果你正在运行Windows，可能会出现有关更改设备的安全提示。如果是这样的话，请单击“Yes”继续进行。</p>
</li>
<li><p>当镜像被写入SD卡和通过验证之后，Etcher会自动卸载你的SD卡，它可以安全地被移除。</p>
</li>
<li><p>从你的笔记本电脑/台式机取出SD适配器，并从SD适配器移除microSD卡。</p>
</li>
</ul>
<h3 id="准备硬件"><a href="#准备硬件" class="headerlink" title="准备硬件"></a>准备硬件</h3><p><a href="http://techbrickcafe.blogspot.com/2015/10/raspberry-pi-2-model-b-single-board.html" target="_blank" rel="external">Tech Brick Café</a>有一个很好的树莓派2各部分的概览图<a href="http://1.bp.blogspot.com/-v9M2cZM4BJo/Vi4l_fie0sI/AAAAAAAAAAw/9aa1y3-hhVQ/s400/Raspberry_pi_2_2.PNG" target="_blank" rel="external">在这里</a>（树莓派3看起来非常相似），这可能会在这一部分内容里帮助你。让我们这个小小的SBC（single board computer）准备启动！这里是步骤：</p>
<ul>
<li><p>插入microSD卡到树莓派。（把树莓派颠倒。microSD卡槽位于USB端口对面那一侧。这个<a href="https://www.youtube.com/watch?v=PCcXa4UFeLg" target="_blank" rel="external">短视频</a>很好地解释了这个过程。）</p>
</li>
<li><p>连接USB键盘和鼠标</p>
</li>
<li><p>连接HDMI线</p>
</li>
<li><p>连接USB Wi-Fi适配器（或以太网连接，如果你不使用Wi-Fi），如果你使用的是树莓派3，这一步是没有必要的，有内置Wi-Fi。</p>
</li>
<li><p>接通电源（你会看到树莓派灯亮并通电了。）</p>
</li>
<li><p>你现在应该看到树莓派在屏幕上启动。万岁!</p>
</li>
</ul>
<h3 id="配置树莓派"><a href="#配置树莓派" class="headerlink" title="配置树莓派"></a>配置树莓派</h3><p>我们首先需要做一些 RasPi 的改动，为的是为我们的使用进行优化和个性化。开始，启动树莓派配置程序，它位于Preferences下面的菜单里。</p>
<p><img src="http://p0.qhimg.com/t01ff562c8a3b88e7c5.png" alt="RasPi configuration GUI"></p>
<p>这将启动树莓派配置程序，这是基于控制台配置程序的一个方便的图形版本，这个控制台程序已经被使用多年用来配置树莓派（实际上，这个控制台程序仍然用于这个图形版本幕后使用）。这将启动以下窗口：</p>
<p><img src="http://p0.qhimg.com/t019b39af645dcf085e.png" alt="rcg1"></p>
<p>让我们开始配置吧！</p>
<ul>
<li><p>Expand Filesystem（扩展文件系统）——单击此按钮可扩展文件系统。这将确保所有的SD卡存储对 Raspbian 可用。</p>
</li>
<li><p>（可选）Change Password（更改密码）——从安全的角度，改变“pi”用户的默认密码是个好主意。只要确保你不忘记它。 😉</p>
</li>
<li><p>Hostname（主机名）——如果远程连接时你喜欢打更少的字（在后面有解释），您可以更改主机名称“raspberrypi”更短一些，如“raspi”。</p>
</li>
</ul>
<h4 id="本地化"><a href="#本地化" class="headerlink" title="本地化"></a>本地化</h4><p>树莓派是我们英国朋友的精彩创意。如果您不是来自英国，你将需要更改一些本地化设置。例如，键盘上的某些键可能无法按预期的方式工作。这是我在圣地亚哥做的一些改动，这让我的树莓派更加舒适：</p>
<p>首先，单击 Localisation 选项卡:</p>
<p><img src="http://p0.qhimg.com/t012071d5895a619ae0.png" alt="localization"></p>
<p>点击 Set Locale 按钮，更改你的区域为适当的设置然后点击 OK。在更改设置后，我的看起来就像这样：</p>
<p><img src="http://p0.qhimg.com/t013e36e5ec4df7354b.png" alt="localization details"></p>
<p>点击 Set Timezone 按钮，设置你的时区，然后点击 OK。</p>
<p><img src="http://p0.qhimg.com/t011b7ff501061ffcb8.png" alt="set timezone"></p>
<p>点击 Set Keyboard 按钮，更改你的键盘为合适的设置，然后点击 OK。这是我的：</p>
<p><img src="http://p0.qhimg.com/t01939eb36ee49762d3.png" alt="set keyboard"></p>
<p>最后，点击 Set WiFi Country 按钮并按需要更改设置。这个对话框列出了大量的国家列表。用你的键盘上的箭头键滚动列表找到你的国家然后点击 OK。</p>
<p><img src="http://p0.qhimg.com/t01cb78a37604acd97c.png" alt="wifi country"></p>
<p>完成这些配置步骤后，点击 OK 退出树莓派配置程序。树莓派然后将通知你它需要重启以便激活你刚才的设置。现在重新启动它。</p>
<h3 id="配置Wi-Fi"><a href="#配置Wi-Fi" class="headerlink" title="配置Wi-Fi"></a>配置Wi-Fi</h3><p>在树莓派重启后，我们已经准备和运行 Wi-Fi 以获得网络。</p>
<ul>
<li>点击屏幕右上方的网络图标，如截图所示。在Wi-Fi配置之前，网络图标将与截图中的图标不同；但是，它应该位于蓝牙图标和扬声器（音量控制）图标之间。</li>
</ul>
<p><img src="http://p0.qhimg.com/t01a09b2533fd768331.png" alt="wifi"></p>
<ul>
<li><p>在点击网络图标之后，选择你的网络SSID（Wi-Fi网络）。如果你没有看到你的Wi-Fi网络，请耐心等待。你可能会在菜单里看到一个“Scanning APs（扫描AP）”的消息；然而当它找出后，你的Wi-Fi网络SSID应该最终出现在菜单里。当你的网络的名称出现后，点击它。</p>
</li>
<li><p>你将被提示输入你的预共享（Wi-Fi）网络密码。输入它然后选择 OK。</p>
</li>
<li><p>等待图标从网络图标转换到上面截图里显示的Wi-Fi图标。从这一点判断，你应该已经连接上了你的Wi-Fi网络。</p>
</li>
<li><p>通过启动终端测试您的Wi-Fi网络连接。</p>
</li>
</ul>
<p><img src="http://p0.qhimg.com/t014509bd1f4f566afa.png" alt="terminal"></p>
<ul>
<li>从终端，发出ping命令，以验证您的网络连接正在工作：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ ping google.com</div></pre></td></tr></table></figure>
<p>我们现在准备继续前进，确保我们的系统是最新的安全补丁</p>
<h3 id="应用Raspbian的更新"><a href="#应用Raspbian的更新" class="headerlink" title="应用Raspbian的更新"></a>应用Raspbian的更新</h3><p>我们将首先运行apt的“update”命令。此命令将不会实际更新系统上的任何软件，但将下载最新的软件包列表的软件库，这样 Raspbian 就可以可以随着依赖了解所有的新软件。在“$”提示下发出以下命令：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sudo apt update</div></pre></td></tr></table></figure>
<p>接下来，运行以下命令来升级安装在您的系统上需要升级的任何包：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sudo apt full-upgrade</div></pre></td></tr></table></figure>
<p>保持你的树莓派系统同步安全更新是很重要的。这两个命令应该一起发出并定期运行。</p>
<h3 id="准备远程桌面"><a href="#准备远程桌面" class="headerlink" title="准备远程桌面"></a>准备远程桌面</h3><p>我们要远程运行我们的树莓派，无需专用的HDMI显示器和USB键盘/鼠标。这被称为无外设模式。我们将使用xrdp包来实现这一目标。新版本的Raspbian（从带有 PIXEL 桌面环境的版本开始）为远程连接功能装载有RealVNC。不幸的是，RealVNC不能很好地工作在无外设方式因为它降级到一个非常低的分辨率，而且改变分辨率有相当多的步骤。我们的xrdp方案自动缩放桌面分辨率，使我们的更容易使用。让我们这样做：</p>
<ul>
<li>我们可以安装xrdp之前，我们必须先安装tightvncserver包。tightvncserver的安装也将删除最新版本的Raspbian装载的RealVNC服务器软件，因为如果安装了RealVNC，tightvncserver（xrdp）不会工作。（感谢Ryan Hanley的提示！）在终端输入下面的命令：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sudo apt install -y tightvncserver</div></pre></td></tr></table></figure>
<p>“-y”选项将自动用“是”回答默认的问题，这是我们在这种情况下想要的。</p>
<ul>
<li>下一步，调用下面的命令来安装xrdp：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sudo apt install -y xrdp</div></pre></td></tr></table></figure>
<ul>
<li>最后，我们需要安装 samba 包，我们将能够从网络上的 Windows 机器通过主机名 raspi 访问树莓派，而不是通过IP地址，因为树莓派会通过 DHCP 改变它的 IP 地址。（对于OS X用户，你可以安装Bonjour然后访问你的树莓派的主机名。例如，如果你的主机名是“raspi”，你可以在OS X上以“raspi.local”访问它。）好了，让我们安装Samba：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sudo apt install -y samba</div></pre></td></tr></table></figure>
<ul>
<li>安装完成后，你应该可以从Windows机器上ping这个树莓派的主机名（上面树莓派配置程序里配置的那个）：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">C:\&gt; ping raspi</div></pre></td></tr></table></figure>
<ul>
<li><p>现在你已准备好了启动远程桌面连接！</p>
</li>
<li><p>在你的Windows机器上，点击Windows键，输入“Remote Desktop Connection”（远程桌面连接）调出远程桌面程序。点击它来启动它。（OS X用户可以使用<a href="https://itunes.apple.com/us/app/microsoft-remote-desktop/id715768417" target="_blank" rel="external">Microsoft Remote Desktop</a>，这在Mac应用商店是免费的。）</p>
</li>
<li><p>在 Computer 文本框输入你的树莓派的主机名（在我的情况下是“raspi”）。</p>
</li>
</ul>
<p><img src="http://p0.qhimg.com/t01bc0fef5800a1b5ec.png" alt="Windows Remote Desktop"></p>
<ul>
<li>然后，点击 Display 标签。移动 Display configuration 滑块到右边的“Full Screen”来保证我们的远程桌面连接将填补我的屏幕。它有可能已经被设置为“Full Screen”。</li>
</ul>
<p><img src="http://p0.qhimg.com/t019b0728706ea4ece8.png" alt="Remote desktop display tab"></p>
<ul>
<li><p>点击靠近对话框底部的 Connect 按钮。</p>
</li>
<li><p>然后你将被xrdp的登录屏幕提示：</p>
</li>
</ul>
<p><img src="http://p0.qhimg.com/t01f9896dbb594b2e10.png" alt="xrdpLogin"></p>
<ul>
<li><p>输入您的凭据登录到树莓派。</p>
</li>
<li><p>用户名：pi</p>
</li>
<li><p>密码：raspberry（除非你在之前的教程里的树莓派配置程序里改变了它。）</p>
</li>
</ul>
<p>太神了！我们远程连接到了 RasPi，我们不再需要专用的HDMI显示器和USB键盘/鼠标。让我们先关闭 RasPi 一分钟，这样我们可以释放我们的显示器和键盘/鼠标：</p>
<ul>
<li>启动一个终端会话并输入下面的命令来关闭您的系统：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sudo poweroff</div></pre></td></tr></table></figure>
<ul>
<li><p>等待的 RasPi 完全断电。</p>
</li>
<li><p>拔掉电源线，HDMI线，USB键盘和鼠标。</p>
</li>
<li><p>把插头电源线接回来，RasPi 应该会重新启动，但没有那些多余的连线！</p>
</li>
<li><p>给了 RasPi 一分钟左右开机之后，再次使用Windows远程桌面程序连接到它。</p>
</li>
</ul>
<h3 id="在RasPi创建-Windows-文件共享（可选）"><a href="#在RasPi创建-Windows-文件共享（可选）" class="headerlink" title="在RasPi创建 Windows 文件共享（可选）"></a>在RasPi创建 Windows 文件共享（可选）</h3><p>我们可以在RasPi创建一个Windows文件共享，使我们能从Windows机器上直接复制文件到RasPi。这可以在许多情况下派上用场。对于OS X用户这也是有用的，因为你将能够从“Shared”的Finder连接到您的树莓派文件共享。这是我们如何做的：</p>
<ul>
<li><p>启动一个终端会话。</p>
</li>
<li><p>如下在主目录中创建一个名为“share”的目录：</p>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ mkdir ~/share</div></pre></td></tr></table></figure>
<ul>
<li>发出以下命令来启动Leafpad编辑器。</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sudo leafpad /etc/samba/smb.conf &amp;</div></pre></td></tr></table></figure>
<ul>
<li><p>我们也可以使用基于控制台的“nano”编辑器，但Leafpad提供一个GUI，比较适合初学者。在启动Leafpad的命令结尾的“&amp;”符号让Leafpad成为后台进程，让我们回到终端shell提示符。同时，smb.conf 是我们之前安装的Samba软件包的一部分，这就是为什么它会存在在我们的系统里。</p>
</li>
<li><p>向下滚动到smb.conf配置文件的底部并添加下面的配置：</p>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">[PiShare]</div><div class="line"> comment=Raspi Share</div><div class="line"> path=/home/pi/share</div><div class="line"> browseable=Yes</div><div class="line"> writeable=Yes</div><div class="line"> only guest=No</div><div class="line"> create mask=0740</div><div class="line"> directory mask=0750</div><div class="line"> public=no</div></pre></td></tr></table></figure>
<ul>
<li><p>保存smb.conf配置文件的修改并退出Leafpad编辑器。（Raspbian将自动重启基于您的配置文件所做的更改的SMB（Samba）服务。）</p>
</li>
<li><p>回到终端会话，我们需要创建一个SMB（Samba）用户可以让我们安全地从Windows连接。我们将创建一个名为“pi”的用户，但这将是一个SMB（Windows用户）而不是Raspbian的“pi”的用户。这是我们如何做的：</p>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sudo smbpasswd -a pi</div></pre></td></tr></table></figure>
<p>你会被提示输入并重新输入密码。将此密码记录在某处以备将来查阅。</p>
<p>我们已经准备好了从Windows连接到我们新创建的RasPi文件共享！</p>
<ul>
<li><p>回到你的Windows机器，键入Windows键和“R”（Win-R）启动输入命令的运行对话框。</p>
</li>
<li><p>输入两个反斜杠后跟你的 RasPi 机器名（例如：你的主机名）并且敲下回车。例如：</p>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">\\raspi</div></pre></td></tr></table></figure>
<ul>
<li><p>提示凭据时，输入以下内容：</p>
</li>
<li><p>用户名：以Windows语法输入的格式是域\用户名。对我们来说，我们的域是我们RasPi的主机名、用户名是“pi”。因此，我们将输入：raspi\pi</p>
</li>
</ul>
<p>如果你的名字是不是raspi，你显然应该用你的替换它来输入。</p>
<ul>
<li><p>密码：（输入你上面用smbpasswd命令创建的密码）</p>
</li>
<li><p>瞧！我们现在应该连接上了。双击 PiShare 文件夹启动你刚才创建的文件分享。你也会看到一个叫做pi的文件夹，它给你的整个主目录提供只读权限。</p>
</li>
<li><p>你可以通过在Windows端创建一个文本文件，并验证它出现在 RasPi 端的目录 /home/pi/share 里，这样来测试你新创建的文件共享。</p>
</li>
<li><p>在Windows中，还可以将驱动器映射到刚刚创建的文件共享：</p>
</li>
<li><p>启动窗口资源管理器。</p>
</li>
<li><p>点击在顶部带状菜单的 Map network drive （映射网络驱动器）按钮并选择映射到网络驱动器。</p>
</li>
<li><p>输入驱动器盘符（比如“pi”驱动器的“P”盘符）、共享目录路径、并选择在登录时重新连接：</p>
</li>
</ul>
<p><img src="http://p0.qhimg.com/t01f5c62c18c4265129.png" alt="map drive"></p>
<ul>
<li>输入上面你用smbpasswd命令创建的密码（如果被提示输入的话），选择 Remember my credentials（记住我的凭证）：</li>
</ul>
<p><img src="http://p0.qhimg.com/t0157e83003a43782ea.png" alt="map drive"></p>
<ul>
<li>在通过窗口浏览器查看时，你现在应该能看到一个“P”驱动器（或者其他你选择的驱动器盘符）！</li>
</ul>
<h3 id="安装-Node-js"><a href="#安装-Node-js" class="headerlink" title="安装 Node.js"></a>安装 Node.js</h3><p>您现在有一个惊艳的通用树莓派系统，可用于各种任务，并在Windows世界中运行良好（它甚至和其他Windows机器看起来就像是一个Windows机器！）——而且也可以很好地在Mac和Linux世界里工作。让我们继续安装Node.js，我们将准备在未来做一些有趣的项目。这里是步骤：</p>
<p>我们在<a href="https://nodesource.com/" target="_blank" rel="external">NodeSource</a>的朋友主办并维护一些优秀的Node.js的二进制分发。我们将利用一个他们写的命令添加另一个包管理库到我们的RasPi，所以，我们可以从他们的仓库“apt install”一个现代版的Node.js。这是有益的因为Debian / Raspbian版本可能不会永远是最新的。通过添加 NodeSource 库，我们也将能够接收更新，而不是仅仅安装一个不容易升级的 Node 版本的独立的（.deb）文件。</p>
<blockquote>
<p>注：如本文开头介绍的，最后这部分对Node.js安装相关的教程，要求基于新的ARMv7或ARMv8芯片诸如树莓派2和树莓派3的系统。NodeSource 提供 Node.js 的二进制文件给ARMv7+的架构，但不支持基于旧的ARMv6架构的树莓派系统，诸如树莓派B/B+型号，或者树莓派0。</p>
<p>仔细阅读你的树莓派电路板，确认写的是类似“Raspberry Pi 3 Model B”或者“Raspberry Pi 2 Model B”的东西。如果有疑问，在终端中运行以下命令：</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&gt; $ uname -m</div><div class="line">&gt;</div></pre></td></tr></table></figure>
<blockquote>
<p>如果返回的结果以“armv6”开头，你正在运行一个基于旧的ARMv6芯片的树莓派，并且后面的 Node.js 安装步骤不会成功；否则，你已经准备好了下一步。</p>
</blockquote>
<p>这里我们来到了最后的时段！让我们继续进行安装 Node 的最新版本，Node 7.2.1。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ curl -sL https://deb.nodesource.com/setup_7.x | sudo -E bash -</div></pre></td></tr></table></figure>
<p>前面的命令修改我们的Debian的apt包管理库引用NodeSource包。</p>
<blockquote>
<p>注：从安全的角度来看知道你在系统上调用了什么命令通常是一个好想法，特别是因为上面的命令以root用户调用脚本。如果你希望知道这个脚本后面的技术细节，你可以在浏览器打开这个网址(<a href="https://deb.nodesource.com/setup_7.x" target="_blank" rel="external">https://deb.nodesource.com/setup_7.x</a>)，然后审查代码。这个脚本执行一些步骤以确定正在运行的Linux发行版，并指示Debian apt包管理系统添加NodeSource包仓库作为一个值得信赖的来源以获取Debian软件包。这让我们现在可以安装 Node.js 并且<a href="http://thisdavej.com/upgrading-to-more-recent-versions-of-node-js-on-the-raspberry-pi/" target="_blank" rel="external">可以升级到最新版本的可用Node.js</a>。</p>
</blockquote>
<p>现在，我们已经添加了 NodeSource 包仓库，我们可以继续安装Node.js了！</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sudo apt install nodejs</div></pre></td></tr></table></figure>
<p>然后我们可以测试和查看我们正在运行的 Node 版本，并且启动 Node 控制台，就像我们在<a href="http://thisdavej.com/learning-through-making-getting-started-with-node-js/" target="_blank" rel="external">前一篇文章</a>里讨论的那样，作为一个快速测试，以确认安装成功。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">$ node -v</div><div class="line">v7.2.1</div><div class="line">$ node</div><div class="line">&gt; 1 + 3</div><div class="line">4</div><div class="line">&gt; # 我们可以敲两次 Ctrl-C 来退出控制台，返回 shell 提示符。</div></pre></td></tr></table></figure>
<h3 id="下一次"><a href="#下一次" class="headerlink" title="下一次"></a>下一次</h3><p>在以后的文章中，我们将利用npm（Node Package Manager，Node包管理器）社区的长处，建立一个简单的，但高可用的Web服务器，无需任何代码。这可以通过使用你刚刚在这里创建的树莓派系统，或在Windows/Linux/Mac机器上完成，正如我在一篇<a href="http://thisdavej.com/learning-through-making-getting-started-with-node-js/" target="_blank" rel="external">之前的文章</a>中所概述的。希望再见到你！</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;在树莓派上安装-Node-js-的指引-thisDaveJ&quot;&gt;&lt;a href=&quot;#在树莓派上安装-Node-js-的指引-thisDaveJ&quot; class=&quot;headerlink&quot; title=&quot;在树莓派上安装 Node.js 的指引 | thisDaveJ&quot;&gt;&lt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>亲自上手es6的class</title>
    <link href="http://physihan.github.io/2016/11/29/%E4%BA%B2%E8%87%AA%E4%B8%8A%E6%89%8Bes6%E7%9A%84class/"/>
    <id>http://physihan.github.io/2016/11/29/亲自上手es6的class/</id>
    <published>2016-11-29T10:59:05.000Z</published>
    <updated>2016-12-03T08:48:04.416Z</updated>
    
    <content type="html"><![CDATA[<p>新一代标准已经提出有些日子了，最近在写react的时候，react用了大量的class的语法去写组件，对于class的理解不是很深刻，于是这里把从babel转换的代码分享给大家。</p>
<h2 id="类-构造函数-原型"><a href="#类-构造函数-原型" class="headerlink" title="类=构造函数+原型"></a>类=构造函数+原型</h2><p>es6标准的类和其他语言的类很相似，但是这只是一种语法糖，底层还是通过原型继承实现的，首先看一个简单的类的形式<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;</div><div class="line">  <span class="keyword">constructor</span>()&#123;</div><div class="line">    <span class="keyword">this</span>.name=<span class="string">'xiaoming'</span></div><div class="line">  &#125;</div><div class="line">  sayHello()&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'hello'</span>)</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>包含一个构造函数，和一个类里面的函数，如果大家对原型继承有所了解的话，这种形式可以近似写成<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">A</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  <span class="keyword">this</span>.name=<span class="string">'xiaoming'</span>;</div><div class="line">&#125;</div><div class="line">A.prototype=&#123;</div><div class="line">  <span class="attr">sayHello</span>:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'hello'</span>)</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>这就是类的雏形，但是实际操作上还是有些不同的，下面就是babel翻译的es5的语法</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line"><span class="meta">'use strict'</span>;</div><div class="line"></div><div class="line"><span class="keyword">var</span> _createClass = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; </div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">defineProperties</span>(<span class="params">target, props</span>) </span>&#123;</div><div class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; props.length; i++) &#123;</div><div class="line">    <span class="keyword">var</span> descriptor = props[i]; </div><div class="line">    descriptor.enumerable = descriptor.enumerable || <span class="literal">false</span>; </div><div class="line">    descriptor.configurable = <span class="literal">true</span>; </div><div class="line">    <span class="keyword">if</span> (<span class="string">"value"</span> <span class="keyword">in</span> descriptor)</div><div class="line">      descriptor.writable = <span class="literal">true</span>; </div><div class="line">    <span class="built_in">Object</span>.defineProperty(target, descriptor.key, descriptor);</div><div class="line">   &#125; </div><div class="line">&#125;</div><div class="line"><span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">Constructor, protoProps, staticProps</span>) </span>&#123;</div><div class="line">  <span class="keyword">if</span> (protoProps) </div><div class="line">    defineProperties(Constructor.prototype, protoProps);</div><div class="line">  <span class="keyword">if</span> (staticProps) </div><div class="line">    defineProperties(Constructor, staticProps); </div><div class="line"><span class="keyword">return</span> Constructor; </div><div class="line">&#125;&#125;();</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">_classCallCheck</span>(<span class="params">instance, Constructor</span>) </span>&#123; </div><div class="line">  <span class="keyword">if</span> (!(instance <span class="keyword">instanceof</span> Constructor))  &#123;</div><div class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">TypeError</span>(<span class="string">"Cannot call a class as a function"</span>);</div><div class="line">  &#125; </div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> A = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">A</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    _classCallCheck(<span class="keyword">this</span>, A);</div><div class="line">    <span class="keyword">this</span>.name = <span class="string">'xiaoming'</span>;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  _createClass(A, [&#123;</div><div class="line">    <span class="attr">key</span>: <span class="string">'sayHello'</span>,</div><div class="line">    <span class="attr">value</span>: <span class="function"><span class="keyword">function</span> <span class="title">sayHello</span>(<span class="params"></span>) </span>&#123;</div><div class="line">      <span class="built_in">console</span>.log(<span class="string">'hello'</span>);</div><div class="line">    &#125;</div><div class="line">  &#125;]);</div><div class="line"></div><div class="line">  <span class="keyword">return</span> A;</div><div class="line">&#125;();</div></pre></td></tr></table></figure>
<p>这个代码感兴趣大家可以看看，其中有几个地方需要注意，这个类A不能当成函数去调用，<code>A()</code>这种方法调用会报错，可以<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> a = <span class="keyword">new</span> A();</div></pre></td></tr></table></figure></p>
<p>这样去实例化一个类，当然类都是需要继承的，新版本中继承用extends来实现，考虑这样一个类B继承类A<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"> <span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;</div><div class="line">  <span class="keyword">constructor</span>()&#123;</div><div class="line">    <span class="keyword">this</span>.name=<span class="string">'xiaoming'</span></div><div class="line">  &#125;</div><div class="line">  sayHello()&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'hello'</span>)</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line">  <span class="class"><span class="keyword">class</span> <span class="title">B</span> <span class="keyword">extends</span> <span class="title">A</span></span>&#123;</div><div class="line">  <span class="keyword">constructor</span>()&#123;</div><div class="line">    <span class="keyword">super</span>() </div><div class="line">    <span class="keyword">this</span>.age=<span class="number">12</span></div><div class="line">  &#125;</div><div class="line">  sayHello()&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'hello'</span>)</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>这是加完继承后的代码<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div></pre></td><td class="code"><pre><div class="line"><span class="meta">'use strict'</span>;</div><div class="line"></div><div class="line"><span class="keyword">var</span> _createClass = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; </div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">defineProperties</span>(<span class="params">target, props</span>) </span>&#123; </div><div class="line">...<span class="comment">//和前面一样</span></div><div class="line"> &#125;();</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">_possibleConstructorReturn</span>(<span class="params">self, call</span>) </span>&#123; <span class="keyword">if</span> (!self) &#123;</div><div class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">ReferenceError</span>(<span class="string">"this hasn't been initialised - super() hasn't been called"</span>); &#125; </div><div class="line">  <span class="keyword">return</span> call &amp;&amp; (<span class="keyword">typeof</span> call === <span class="string">"object"</span> || <span class="keyword">typeof</span> call === <span class="string">"function"</span>) ? call : self; </div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">_inherits</span>(<span class="params">subClass, superClass</span>) </span>&#123; </div><div class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> superClass !== <span class="string">"function"</span> &amp;&amp; superClass !== <span class="literal">null</span>) &#123;</div><div class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">TypeError</span>(<span class="string">"Super expression must either be null or a function,not "</span> + <span class="keyword">typeof</span> superClass); </div><div class="line">  &#125; </div><div class="line">  subClass.prototype = <span class="built_in">Object</span>.create(superClass &amp;&amp; superClass.prototype, &#123;</div><div class="line">  <span class="attr">constructor</span>: &#123;</div><div class="line">    <span class="attr">value</span>: subClass, </div><div class="line">    <span class="attr">enumerable</span>: <span class="literal">false</span>,</div><div class="line">    <span class="attr">writable</span>: <span class="literal">true</span>,</div><div class="line">    <span class="attr">configurable</span>: <span class="literal">true</span> </div><div class="line">  &#125;</div><div class="line"> &#125;); </div><div class="line"><span class="keyword">if</span> (superClass) </div><div class="line">  <span class="built_in">Object</span>.setPrototypeOf ?</div><div class="line">  <span class="built_in">Object</span>.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; &#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">_classCallCheck</span>(<span class="params">instance, Constructor</span>) </span>&#123;</div><div class="line">  <span class="keyword">if</span> (!(instance <span class="keyword">instanceof</span> Constructor)) &#123; </div><div class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">TypeError</span>(<span class="string">"Cannot call a class as a function"</span>);</div><div class="line">  &#125; </div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> A = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">A</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    _classCallCheck(<span class="keyword">this</span>, A);</div><div class="line"></div><div class="line">    <span class="keyword">this</span>.name = <span class="string">'xiaoming'</span>;</div><div class="line">    <span class="keyword">this</span>.say = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">      <span class="built_in">console</span>.log(<span class="string">"123"</span>);</div><div class="line">    &#125;;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  _createClass(A, [&#123;</div><div class="line">    <span class="attr">key</span>: <span class="string">'sayHello'</span>,</div><div class="line">    <span class="attr">value</span>: <span class="function"><span class="keyword">function</span> <span class="title">sayHello</span>(<span class="params"></span>) </span>&#123;</div><div class="line">      <span class="built_in">console</span>.log(<span class="string">'hello'</span>);</div><div class="line">    &#125;</div><div class="line">  &#125;]);</div><div class="line"></div><div class="line">  <span class="keyword">return</span> A;</div><div class="line">&#125;();</div><div class="line"></div><div class="line"><span class="keyword">var</span> B = <span class="function"><span class="keyword">function</span> (<span class="params">_A</span>) </span>&#123;</div><div class="line">  _inherits(B, _A);</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">B</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    _classCallCheck(<span class="keyword">this</span>, B);</div><div class="line"></div><div class="line">    <span class="keyword">var</span> _this = _possibleConstructorReturn(<span class="keyword">this</span>, (B.__proto__ || <span class="built_in">Object</span>.getPrototypeOf(B)).call(<span class="keyword">this</span>));</div><div class="line"></div><div class="line">    _this.age =<span class="number">12</span>;</div><div class="line">    <span class="keyword">return</span> _this;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  _createClass(B, [&#123;</div><div class="line">    <span class="attr">key</span>: <span class="string">'sayHello'</span>,</div><div class="line">    <span class="attr">value</span>: <span class="function"><span class="keyword">function</span> <span class="title">sayHello</span>(<span class="params"></span>) </span>&#123;</div><div class="line">      <span class="built_in">console</span>.log(<span class="string">'hello'</span>);</div><div class="line">    &#125;</div><div class="line">  &#125;]);</div><div class="line"></div><div class="line">  <span class="keyword">return</span> B;</div><div class="line">&#125;(A);</div></pre></td></tr></table></figure></p>
<p>代码很长,都不用看，只看_inherits这个函数，从这一句<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">subClass.prototype = <span class="built_in">Object</span>.create(superClass &amp;&amp; superClass.prototype, &#123;</div><div class="line">  <span class="attr">constructor</span>: &#123; </div><div class="line">    <span class="attr">value</span>: subClass, </div><div class="line">    <span class="attr">enumerable</span>: <span class="literal">false</span>, </div><div class="line">    <span class="attr">writable</span>: <span class="literal">true</span>, </div><div class="line">    <span class="attr">configurable</span>: <span class="literal">true</span> </div><div class="line">  &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>这里有个小技巧，&amp;&amp;当计算前面为false时，就不计算后面的表达式了，当然返回的是false或者最后一个值，这是从左向右计算的，这里意思就是如果 superClass 存在，那就计算 superClass.prototype，当然也就是存在的，这一句就是将B的原型设为一个以 A 的 prototype 为原型的对象，也就是说<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">B.prototype.__proto__=A.prototype</div></pre></td></tr></table></figure></p>
<h2 id="proto-VS-prototype"><a href="#proto-VS-prototype" class="headerlink" title="proto VS prototype"></a>proto VS prototype</h2><p>这里<code>__proto__</code>这个属性是每个对象都有的，就是因为这个属性的存在，对象可以继承很多不是他自己的属性或方法，比如<code>toString()</code>。虽然<code>toString()</code>不是这个对象自己的方法，但是去调用一个对象的这个方法时，这个对象自己没有，就会去找这个对象的<code>__proto__</code>，在它的<code>__proto__</code>所指向的对象中去找，如果找不到，就会继续去在这个<code>__proto__</code>的<code>__proto__</code>中去找，这就形成了一个原型链，直到找到为止，找不到就会报错。<br>而<code>prototype</code>和<code>__proto__</code>之间的区别很明显，<code>prototype</code>是函数对象所特有的，他作为一个属性指向另一个对象，即这个函数的原型对象，它存在的目的只是为了生产对象，通过这个函数new出来的对象都有一个<code>__proto__</code>属性指向这个函数的原型对象，从下面代码就可以看出来<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">A</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  <span class="keyword">this</span>.name=<span class="string">'xiaoming'</span></div><div class="line">&#125;</div><div class="line">A.prototype=&#123;</div><div class="line">  <span class="attr">sayhi</span>:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'hi'</span>)</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> a=<span class="keyword">new</span> A();</div><div class="line"><span class="built_in">console</span>.log(a.__proto__===A.prototype)</div><div class="line"><span class="comment">// true</span></div></pre></td></tr></table></figure></p>
<p>也就是说，对象的<code>__proto__</code>属性指向那个制造这个对象的构造函数的原型对象，通过对象字面量形式创建的对象的<code>__proto__</code>就是<code>Object.prototype</code>,<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">o = &#123;&#125;;// 以字面量方式创建的空对象就相当于:</div><div class="line">o = Object.create(Object.prototype);</div></pre></td></tr></table></figure></p>
<p>那么继续之前的话题，<code>_inherits</code>函数中有这一句<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (superClass) </div><div class="line"><span class="built_in">Object</span>.setPrototypeOf ? </div><div class="line"><span class="built_in">Object</span>.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;</div></pre></td></tr></table></figure></p>
<p>这样子类的<code>__proto__</code>就指向了父类，就将原型链头指向了父类，也就是在B中可以使用A的方法和属性，注意是在B这个构造函数内，B的原型对象在之前的代码已经解释了，通过<code>Object.create</code>方法把B的原型对象绑定到了A的原型上，B的原型对象可以通过原型链原型继承使用A的原型对象的属性和方法。<br>总之最后的情况是这样的<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">B.__proto__=A</div><div class="line">B.prototype=对象xx</div><div class="line">对象xx:&#123;</div><div class="line"><span class="attr">__proto__</span>:A.prototype</div><div class="line"><span class="keyword">constructor</span>:B</div><div class="line">...</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>当使用new去创建一个B的实例b时会发生这样的过程<br>在constructor中会得到以this.xx，比如this.age this.age…<br>等等还有一个不能忘了在B的构造函数中会有个super()，这样A的构造函数也会执行了，不然没有name属性<br>然后就是将这个对象的<code>__proto__</code>指向那个对象xx，也就是B这个构造函数的原型对象，这样就能访问这个原型链上的属性和方法了。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>新版本的类也是基于原型继承的，所以只要把基础打好了，遇到新的东西也理解的比较清楚，class中constructor对应的还是以前的构造函数，整个类里面的内容就是这个构造函数的原型对象的内容，如果有继承还要加上继承的对象的内容，我们依然可以用类名<code>xx</code>来指代以前的构造函数，<code>xx.prototype</code>来指代原型对象。新的语法形式，对外隐藏了实现的细节，写起来更加简洁，还有会在不正当时使用时的错误提示。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;新一代标准已经提出有些日子了，最近在写react的时候，react用了大量的class的语法去写组件，对于class的理解不是很深刻，于是这里把从babel转换的代码分享给大家。&lt;/p&gt;
&lt;h2 id=&quot;类-构造函数-原型&quot;&gt;&lt;a href=&quot;#类-构造函数-原型&quot; cla
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>webpack文件目录详解</title>
    <link href="http://physihan.github.io/2016/11/09/webpack%E6%96%87%E4%BB%B6%E7%9B%AE%E5%BD%95%E8%AF%A6%E8%A7%A3/"/>
    <id>http://physihan.github.io/2016/11/09/webpack文件目录详解/</id>
    <published>2016-11-09T12:09:15.000Z</published>
    <updated>2016-11-09T12:11:13.947Z</updated>
    
    <content type="html"><![CDATA[<p>最近想学一门前端框架，之前看了一些Angular1的教程，难学就不说了，它的主人好像有了放弃他的意思，推出了Angular2，基本上算是推翻了重来，而且文档还要越过GFW才能看，最近特别火的React也不错，但是最后还是选了文档十分友好的Vue,它借鉴了Angular1的指令和React组件化思想，在2.0版本中还加入了virtual DOM。</p>
<p>这是一个<strong>渐进式框架</strong>，不同于jquery的直接操作dom，它是数据驱动的，Vue 的核心库只关注视图层，是一个轻量级的框架，可以和其他库相整合。废话不多说，大家可以去这个<a href="https://vuefe.cn/guide/" target="_blank" rel="external">网站</a>去看它的详细文档。</p>
<p>实践才能真正掌握它，vue可以像jquery一样通过<code>&lt;script&gt;</code>标签的方式写到html中，现在前端技术日新月异，在我看来，如果现在学习的话还不用新的东西，还要学老一套的，迟早要被淘汰，这里我使用的是vue-cli，使用webpack来搭建这个项目，对于webpack的介绍请看<a href="http://webpackdoc.com/" target="_blank" rel="external">这里</a>，总之它非常好用，也是我要学习它的原因，这个脚手架工具，这有vue-cli的<a href="https://vuefe.cn/guide/" target="_blank" rel="external">安装方法</a>，当然最简单的方法就是从github上直接copy下来，这里是<a href="https://github.com/physihan/vue-example" target="_blank" rel="external">连接</a>，下载下来后在解压后的文件夹内安装依赖<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install</div></pre></td></tr></table></figure></p>
<p>最后的文件目录是这样的<br><a id="more"></a><br><img src="http://upload-images.jianshu.io/upload_images/2581327-6275a19306ae43ac.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="vue 示例"><br>下面就开始分析这些目录中的这些文件<br>首先要说的是<code>package.json</code>这个文件，这是整个文件的灵魂啊，<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  &quot;name&quot;: &quot;example&quot;,                                          </div><div class="line">  &quot;version&quot;: &quot;1.0.0&quot;,                                            </div><div class="line">  &quot;description&quot;: &quot;A Vue.js project&quot;,</div><div class="line">  &quot;author&quot;: &quot;xxx&quot;,</div><div class="line">  &quot;private&quot;: true,</div><div class="line">  &quot;scripts&quot;: &#123;</div><div class="line">    &quot;dev&quot;: &quot;node build/dev-server.js&quot;,</div><div class="line">    &quot;build&quot;: &quot;node build/build.js&quot;,</div><div class="line">    &quot;lint&quot;: &quot;eslint --ext .js,.vue src&quot;</div><div class="line">  &#125;,</div><div class="line">  &quot;dependencies&quot;: &#123;</div><div class="line">    //真的依赖。。</div><div class="line">    &quot;vue&quot;: &quot;^2.0.1&quot;</div><div class="line">  &#125;,</div><div class="line">  &quot;devDependencies&quot;: &#123;</div><div class="line">   //太多省略了</div><div class="line">   //这里是开发时的依赖</div><div class="line">  &#125;,</div><div class="line">  &quot;engines&quot;: &#123;</div><div class="line">    &quot;node&quot;: &quot;&gt;= 4.0.0&quot;,</div><div class="line">    &quot;npm&quot;: &quot;&gt;= 3.0.0&quot;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>这个文件是可以通过<code>npm init</code>控制行命令生成，前提是你电脑得装了node，如果没有的话，这篇文章可以先不用看了，先去装个node吧。</p>
<p><code>package.json</code>这个文件是json格式的文件，它的每一个键值对，储存了这个项目的数据， <code>&quot;dependencies&quot;</code>和<code>&quot;devDependencies&quot;</code>是这个项目所要用到的依赖包，什么是依赖包呢，就拿就jquery和bootstrap说吧，要想使用bootstrap就要先引入jquery，而这就产生了依赖关系，webpack可以将所要用到的各种资源文件包括js、css等文件打包，好处就是将繁杂的资源引用打包，减少http请求数，压缩资源存储空间，加快网页访问速度。</p>
<p>回到这个文件，<code>&quot;dependencies&quot;</code>主要是网页所要用到的依赖包，我们演示的是vue示例，当然就有<code>&quot;vue&quot;: &quot;^2.0.1&quot;</code>这一条了，后面的是依赖包的版本号；而<code>&quot;devDependencies&quot;</code>是开发时的包依赖，比如我们要想在js配置文件中使用es6的语法就需要引用barbel依赖，要模拟服务器就要使用express模块等等，但是他们只是开发的时候用，资源打包编译过后就不用这些组件或模块了，因此写在<code>&quot;devDependencies&quot;</code>下边。</p>
<p>node是一个js的运行环境，npm是随着node一起安装的包管理工具，正确装完node之后就可以使用命令行指令了，通过node指令可以执行js文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ node xx.js          //执行某文件</div></pre></td></tr></table></figure></p>
<p>而npm指令可以执行<code>package.json</code>里定义的相关操作<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&quot;scripts&quot;: &#123; </div><div class="line">&quot;dev&quot;: &quot;node build/dev-server.js&quot;, </div><div class="line">&quot;build&quot;: &quot;node build/build.js&quot;, </div><div class="line">&quot;lint&quot;: &quot;eslint --ext .js,.vue src&quot; </div><div class="line">&#125;,</div></pre></td></tr></table></figure></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">$ npm installl          </div><div class="line">//把dependencies和devDependencies中的依赖下载安装到node_modules文件夹</div><div class="line">$ npm run-script dev</div><div class="line">//也可以这么写</div><div class="line">$ npm run dev</div><div class="line">//执行package.json中的dev这个指令，在这里等同于</div><div class="line">$ node build/dev-server.js</div><div class="line">//这里可以自己随便写，引号里的是要在命令行执行的指令</div></pre></td></tr></table></figure>
<p>打开文件夹，在这个文件下打开命令行，<code>shift</code>+鼠标右键打开命令行</p>
<p><img src="http://upload-images.jianshu.io/upload_images/2581327-1ea3968051206385.gif?imageMogr2/auto-orient/strip" alt="演示.gif"></p>
<p>我们执行<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm run dev</div></pre></td></tr></table></figure></p>
<p>这样就成功的在浏览器中显示了<br>可是对这个过程是怎么实现的依然一头雾水</p>
<h2 id="build文件夹"><a href="#build文件夹" class="headerlink" title="build文件夹"></a>build文件夹</h2><p>那我们就从这个指令开始吧<code>$ npm run dev</code>，之前说了，这个指令就是执行这个目录build/下的dev-server.js文件<br>build文件目录是这样的<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">|-build</div><div class="line">    |-build.js</div><div class="line">    |-check-versions.js</div><div class="line">    |-dev-client.js</div><div class="line">    |-dev-server.js</div><div class="line">    |-utils.js</div><div class="line">    |-webpack.base.conf.js</div><div class="line">    |-webpack.dev.conf.js</div><div class="line">    |-webpack.prod.conf.js</div></pre></td></tr></table></figure></p>
<p>（瞬间感觉压力巨大，但是本着不能轻言放弃的原则，我会坚持下去的）<br>打开<code>dev-server.js</code>这个文件，有点大，如果你能一条条读下来，相信会收获很多的<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div></pre></td><td class="code"><pre><div class="line">require(&apos;./check-versions&apos;)()</div><div class="line">//这里是将package.json中的engine要求的node，npm版本号和本地版本相比对</div><div class="line">//如果不符合就会在命令行用红色和绿色的文字发出警告</div><div class="line">var config = require(&apos;../config&apos;)</div><div class="line">//引入另一个文件夹config的index.js总之是一些配置组成的对象</div><div class="line">if (!process.env.NODE_ENV) process.env.NODE_ENV = config.dev.env</div><div class="line">//process是nodejs中的一个全局对象，可以看作一个进程，这个procee.env中保存着当前shell的环境变量</div><div class="line">//这里是如果这个环境变量中没有NODE_ENV这个属性，就将它的值设为开发模式development，相对的还有生产模式production</div><div class="line">var path = require(&apos;path&apos;)</div><div class="line">//这是node里的自带模块，用来处理相对路径绝对路径等</div><div class="line">var express = require(&apos;express&apos;)</div><div class="line">//这是一个基于nodejs的开发框架，可以搭建开发环境下的服务器</div><div class="line">var webpack = require(&apos;webpack&apos;)</div><div class="line">//资源打包模块</div><div class="line">var opn = require(&apos;opn&apos;)</div><div class="line">//一个用来打开网页、文件、可执行文件的模块</div><div class="line">var proxyMiddleware = require(&apos;http-proxy-middleware&apos;)</div><div class="line">//服务器中间件，匹配对应请求的的URL地址, 匹配的请求将被代理到目标主机</div><div class="line">var webpackConfig = require(&apos;./webpack.dev.conf&apos;)</div><div class="line">//在大型项目中，可能 webpack.config.js 会变得越来越臃肿，这个时候可以</div><div class="line">//利用做 webpack-merge 插件。将配置定义在一个目录下面的不同文件中</div><div class="line">//然后通过 webpack-merge 来合并成最终的配置。</div><div class="line">var port = process.env.PORT || config.dev.port</div><div class="line">// 设置端口号</div><div class="line">var proxyTable = config.dev.proxyTable</div><div class="line">//代理表，可以将复杂的url简写</div><div class="line">var app = express()</div><div class="line">//实例化一个express</div><div class="line">var compiler = webpack(webpackConfig)</div><div class="line">//实例化一个compiler</div><div class="line">var devMiddleware = require(&apos;webpack-dev-middleware&apos;)(compiler, &#123;</div><div class="line">  publicPath: webpackConfig.output.publicPath,</div><div class="line">  stats: &#123;</div><div class="line">    colors: true,</div><div class="line">    chunks: false</div><div class="line">  &#125;</div><div class="line">&#125;)</div><div class="line"></div><div class="line">var hotMiddleware = require(&apos;webpack-hot-middleware&apos;)(compiler)</div><div class="line">// force page reload when html-webpack-plugin template changes</div><div class="line">compiler.plugin(&apos;compilation&apos;, function (compilation) &#123;</div><div class="line">  compilation.plugin(&apos;html-webpack-plugin-after-emit&apos;, function (data, cb) &#123;</div><div class="line">    hotMiddleware.publish(&#123; action: &apos;reload&apos; &#125;)</div><div class="line">    cb()</div><div class="line">  &#125;)</div><div class="line">&#125;)</div><div class="line"></div><div class="line">// proxy api requests</div><div class="line">Object.keys(proxyTable).forEach(function (context) &#123;</div><div class="line">  var options = proxyTable[context]</div><div class="line">  if (typeof options === &apos;string&apos;) &#123;</div><div class="line">    options = &#123; target: options &#125;</div><div class="line">  &#125;</div><div class="line">  app.use(proxyMiddleware(context, options))</div><div class="line">&#125;)</div><div class="line"></div><div class="line">// handle fallback for HTML5 history API</div><div class="line">app.use(require(&apos;connect-history-api-fallback&apos;)())</div><div class="line"></div><div class="line">// serve webpack bundle output</div><div class="line">app.use(devMiddleware)</div><div class="line"></div><div class="line">// enable hot-reload and state-preserving</div><div class="line">// compilation error display</div><div class="line">app.use(hotMiddleware)</div><div class="line"></div><div class="line">// serve pure static assets</div><div class="line">var staticPath = path.posix.join(config.dev.assetsPublicPath, config.dev.assetsSubDirectory)</div><div class="line">app.use(staticPath, express.static(&apos;./static&apos;))</div><div class="line"></div><div class="line">module.exports = app.listen(port, function (err) &#123;</div><div class="line">  if (err) &#123;</div><div class="line">    console.log(err)</div><div class="line">    return</div><div class="line">  &#125;</div><div class="line">  var uri = &apos;http://localhost:&apos; + port</div><div class="line">  console.log(&apos;Listening at &apos; + uri + &apos;\n&apos;)</div><div class="line"></div><div class="line">  // when env is testing, don&apos;t need open it</div><div class="line">  if (process.env.NODE_ENV !== &apos;testing&apos;) &#123;</div><div class="line">    opn(uri)</div><div class="line">  &#125;</div><div class="line">&#125;)</div></pre></td></tr></table></figure></p>
<p>打开<code>build.js</code>这个文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line">// https://github.com/shelljs/shelljs</div><div class="line">require(&apos;./check-versions&apos;)()</div><div class="line">//这里是将package.json中的engine要求的node，npm版本号和本地版本相比对，如果不符合就会在命令行用红色和绿色的文字发出警告</div><div class="line">require(&apos;shelljs/global&apos;)</div><div class="line">//可以在js文件中使用unix命令，比如mkdir、rm、cp</div><div class="line">env.NODE_ENV = &apos;production&apos;</div><div class="line">//这个</div><div class="line">var path = require(&apos;path&apos;)</div><div class="line">var config = require(&apos;../config&apos;)</div><div class="line">var ora = require(&apos;ora&apos;)</div><div class="line">var webpack = require(&apos;webpack&apos;)</div><div class="line">var webpackConfig = require(&apos;./webpack.prod.conf&apos;)</div><div class="line"></div><div class="line">console.log(</div><div class="line">  &apos;  Tip:\n&apos; +</div><div class="line">  &apos;  Built files are meant to be served over an HTTP server.\n&apos; +</div><div class="line">  &apos;  Opening index.html over file:// won\&apos;t work.\n&apos;</div><div class="line">)</div><div class="line"></div><div class="line">var spinner = ora(&apos;building for production...&apos;)</div><div class="line">spinner.start()</div><div class="line"></div><div class="line">var assetsPath = path.join(config.build.assetsRoot, config.build.assetsSubDirectory)</div><div class="line">rm(&apos;-rf&apos;, assetsPath)</div><div class="line">mkdir(&apos;-p&apos;, assetsPath)</div><div class="line">cp(&apos;-R&apos;, &apos;static/*&apos;, assetsPath)</div><div class="line"></div><div class="line">webpack(webpackConfig, function (err, stats) &#123;</div><div class="line">  spinner.stop()</div><div class="line">  if (err) throw err</div><div class="line">  process.stdout.write(stats.toString(&#123;</div><div class="line">    colors: true,</div><div class="line">    modules: false,</div><div class="line">    children: false,</div><div class="line">    chunks: false,</div><div class="line">    chunkModules: false</div><div class="line">  &#125;) + &apos;\n&apos;)</div><div class="line">&#125;)</div></pre></td></tr></table></figure></p>
<h2 id="build文件夹-1"><a href="#build文件夹-1" class="headerlink" title="build文件夹"></a>build文件夹</h2><p>这个文件夹里的文件是和编译相关的</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近想学一门前端框架，之前看了一些Angular1的教程，难学就不说了，它的主人好像有了放弃他的意思，推出了Angular2，基本上算是推翻了重来，而且文档还要越过GFW才能看，最近特别火的React也不错，但是最后还是选了文档十分友好的Vue,它借鉴了Angular1的指令和React组件化思想，在2.0版本中还加入了virtual DOM。&lt;/p&gt;
&lt;p&gt;这是一个&lt;strong&gt;渐进式框架&lt;/strong&gt;，不同于jquery的直接操作dom，它是数据驱动的，Vue 的核心库只关注视图层，是一个轻量级的框架，可以和其他库相整合。废话不多说，大家可以去这个&lt;a href=&quot;https://vuefe.cn/guide/&quot;&gt;网站&lt;/a&gt;去看它的详细文档。&lt;/p&gt;
&lt;p&gt;实践才能真正掌握它，vue可以像jquery一样通过&lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt;标签的方式写到html中，现在前端技术日新月异，在我看来，如果现在学习的话还不用新的东西，还要学老一套的，迟早要被淘汰，这里我使用的是vue-cli，使用webpack来搭建这个项目，对于webpack的介绍请看&lt;a href=&quot;http://webpackdoc.com/&quot;&gt;这里&lt;/a&gt;，总之它非常好用，也是我要学习它的原因，这个脚手架工具，这有vue-cli的&lt;a href=&quot;https://vuefe.cn/guide/&quot;&gt;安装方法&lt;/a&gt;，当然最简单的方法就是从github上直接copy下来，这里是&lt;a href=&quot;https://github.com/physihan/vue-example&quot;&gt;连接&lt;/a&gt;，下载下来后在解压后的文件夹内安装依赖&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;$ npm install&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;最后的文件目录是这样的&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>客户端存储</title>
    <link href="http://physihan.github.io/2016/11/07/%E5%AE%A2%E6%88%B7%E7%AB%AF%E5%AD%98%E5%82%A8/"/>
    <id>http://physihan.github.io/2016/11/07/客户端存储/</id>
    <published>2016-11-07T02:30:14.000Z</published>
    <updated>2016-11-07T05:18:47.000Z</updated>
    
    <content type="html"><![CDATA[<p>使用客户端存储实现存储用户的偏好和状态信息</p>
<h2 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h2><p>在制作网页app时，为了更好地去提升客户的使用体验，需要去保存客户的一些信息，比如用户登陆的时候输入的密码、用户喜欢的页面风格啊（很多都是存在服务器上的），由于客户端存储遵循着<strong>同源策略</strong>，不同站点的页面是不可以相互读取数据，但是同一站点的不同页面之间是可以进行数据通信的，这样前一个页面的表单数据就可以在另一个页面显示了。</p>
<p>作为web应用开发者，使用这些客户端存储技术是为了更好提升用户体验，如果是要开发需要迫不得已将隐私数据存在客户端机器上，要设置数据的有效期，这个数据可以保留至当前窗口关闭之前，或者是浏览器关闭之前。客户端存储的数据甚至是可以长期存在，也可以永久保存，要正确使用这个功能，不能给用户留下隐患。<br><a id="more"></a><br>常见的客户端存储分为以下这几种</p>
<ul>
<li>Web存储</li>
<li>cookie</li>
<li>IE User Data</li>
<li>离线web应用</li>
<li>Web数据库</li>
<li>文件系统API<h3 id="Web存储"><a href="#Web存储" class="headerlink" title="Web存储"></a>Web存储</h3>随着html5的广泛应用，Web存储这种形式在支持html5的浏览器中都可以去使用，所谓的Web存储，就是在浏览器的window对象上定义了两个对象属性，他俩的区别就在于存储的有效期不同，使用方式基本一致，<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">sessionStorage.x=5;</div><div class="line">sessionStorage.y=&quot;hello web storage&quot;</div><div class="line">sessionStorage.z=&#123;</div><div class="line">name:&quot;sessionStorage&quot;,</div><div class="line">say:function()&#123;</div><div class="line">alert(&quot;hello&quot;)</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">console.log(sessionStorage)</div></pre></td></tr></table></figure>
</li>
</ul>
<p>就把他当成一个对象用就好了,可惜的是<strong>目前还不支持对象和数组类型的数据存储</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Storage &#123;x: &quot;5&quot;, y: &quot;hello web storage&quot;, z: &quot;[object Object]&quot;, length: 3&#125;</div></pre></td></tr></table></figure></p>
<p>sessionStorage和localStorage的作用域是同源的，一个网页的文档源是很严格的，同源要求url的协议、主机名、端口号都一致。<br>下面这些都是不同的源<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">http://www.example.com            //协议http；主机名www.example.com</div><div class="line">https://www.exsample.com          //不同协议</div><div class="line">http://static.example.com         //不同主机名</div><div class="line">http://www.example.com:8000       //不同端口</div></pre></td></tr></table></figure></p>
<p>在同一个源的sessionStorage和localStorage是相同的，sessionStorage的有效期和这个标签页或者这个页面的顶层窗口是一致的，而localStorage的数据是永久存储在本地的，除非通过浏览器刻意的去删除。这两个对象还提供了存储和查询的API<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">localStorage.setItem(<span class="string">"x"</span>,<span class="number">1</span>);  <span class="comment">//这里的是逗号分隔的两个参数，以x为名存储一个数值</span></div><div class="line">localStorage.getItem(<span class="string">"x"</span>);    <span class="comment">//获取值</span></div><div class="line">localStorage.key(<span class="number">0</span>);          <span class="comment">//第一个名值对的名字</span></div><div class="line">localStorage.clear();         <span class="comment">//清除所有存储的数据</span></div></pre></td></tr></table></figure></p>
<h3 id="cookie"><a href="#cookie" class="headerlink" title="cookie"></a>cookie</h3><p>对于不能使用Web存储的浏览器，cookie也是一个很好的选择，因为它提出的很早，现在几乎所有浏览器都支持使用cookie，常见的使用cookie的地方就是定向广告，比如百度会根据你平时的搜索内容设置成cookie存在你的电脑上，在有些网站的广告栏会根据你的喜好投入广告（其实这样会泄露隐私的。。），可以在浏览器中清除cookie，这样还是有广告，但是已经不是没有个性化广告了哈哈。</p>
<p>和前面所说的Web存储差不多，cookie的作用域是通过文档源和文档路径来确定的，默认情况下，如果不去设置cookie的path和domain属性，那么只有同在一个目录或者这个目录的子目录可见<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">http://www.xxxx.com/yyy                 //在这个页面设置的cookie，未设置path和domain</div><div class="line">http://www.xxxx.com/yyy                 //同目录可以访问</div><div class="line">http://www.xxxx.com/yyy/zzz             //子目录可以访问</div><div class="line">http://www.xxxx.com/yyy/aaa             //子目录可以访问</div><div class="line">http://www.xxxx.com/yyy/zzz/asd         //子目录可以访问</div><div class="line">http://www.xxxx.com/xxx                 //不可访问</div></pre></td></tr></table></figure></p>
<p>下面来说说如何去设置cookie的path和domain属性，path就是文件路径，是上面<code>www.xxxx.com</code>后面的部分,在任何一个路径下设置cookie，如果path设置为<code>/yyy</code>，那么只有<code>/yyy</code>及以下目录可以访问，设置为<code>/</code>就是这个<code>www.xxxx.com</code>域名下的所有目录都可以访问，这就和localStorage和sessionStorage的作用域一样了，除此之外还可以设置domain属性，设置成<code>.xxxx.com</code>,再设置path为<code>/</code>,那就对所有<code>.xxxx.com</code>的子域都有访问权限了。</p>
<p>cookie作为document对象的一个属性，它存储的是一串字符串，以<code>;</code>分隔开，<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">document</span>.cookie = <span class="string">"name=oeschger"</span>;</div><div class="line"><span class="built_in">document</span>.cookie = <span class="string">"favorite_food=tripe"</span>;</div><div class="line">alert(<span class="built_in">document</span>.cookie);</div><div class="line"><span class="comment">// 显示: name=oeschger;favorite_food=tripe</span></div></pre></td></tr></table></figure></p>
<p>cookie的使用特别麻烦，需要处理这些字符串，一般都会封装成函数去保存和读取这些cookie，下面是摘自<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Document/cookie" target="_blank" rel="external">https://developer.mozilla.org/zh-CN/docs/Web/API/Document/cookie</a> 的封装<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*\</span></div><div class="line">|*|</div><div class="line">|*|  :: cookies.js ::</div><div class="line">|*|</div><div class="line">|*|  A complete cookies reader/writer framework with full unicode support.</div><div class="line">|*|</div><div class="line">|*|  https://developer.mozilla.org/en-US/docs/DOM/document.cookie</div><div class="line">|*|</div><div class="line">|*|  This framework is released under the GNU Public License, version 3 or later.</div><div class="line">|*|  http://www.gnu.org/licenses/gpl-3.0-standalone.html</div><div class="line">|*|</div><div class="line">|*|  Syntaxes:</div><div class="line">|*|</div><div class="line">|*|  * docCookies.setItem(name, value[, end[, path[, domain[, secure]]]])</div><div class="line">|*|  * docCookies.getItem(name)</div><div class="line">|*|  * docCookies.removeItem(name[, path], domain)</div><div class="line">|*|  * docCookies.hasItem(name)</div><div class="line">|*|  * docCookies.keys()</div><div class="line">|*|</div><div class="line">\*/</div><div class="line"></div><div class="line"><span class="keyword">var</span> docCookies = &#123;</div><div class="line">  <span class="attr">getItem</span>: <span class="function"><span class="keyword">function</span> (<span class="params">sKey</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="built_in">decodeURIComponent</span>(<span class="built_in">document</span>.cookie.replace(<span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">"(?:(?:^|.*;)\\s*"</span> + <span class="built_in">encodeURIComponent</span>(sKey).replace(<span class="regexp">/[\-\.\+\*]/g</span>, <span class="string">"\\$&amp;"</span>) + <span class="string">"\\s*\\=\\s*([^;]*).*$)|^.*$"</span>), <span class="string">"$1"</span>)) || <span class="literal">null</span>;</div><div class="line">  &#125;,</div><div class="line">  <span class="attr">setItem</span>: <span class="function"><span class="keyword">function</span> (<span class="params">sKey, sValue, vEnd, sPath, sDomain, bSecure</span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span> (!sKey || <span class="regexp">/^(?:expires|max\-age|path|domain|secure)$/i</span>.test(sKey)) &#123; <span class="keyword">return</span> <span class="literal">false</span>; &#125;</div><div class="line">    <span class="keyword">var</span> sExpires = <span class="string">""</span>;</div><div class="line">    <span class="keyword">if</span> (vEnd) &#123;</div><div class="line">      <span class="keyword">switch</span> (vEnd.constructor) &#123;</div><div class="line">        <span class="keyword">case</span> <span class="built_in">Number</span>:</div><div class="line">          sExpires = vEnd === <span class="literal">Infinity</span> ? <span class="string">"; expires=Fri, 31 Dec 9999 23:59:59 GMT"</span> : <span class="string">"; max-age="</span> + vEnd;</div><div class="line">          <span class="keyword">break</span>;</div><div class="line">        <span class="keyword">case</span> <span class="built_in">String</span>:</div><div class="line">          sExpires = <span class="string">"; expires="</span> + vEnd;</div><div class="line">          <span class="keyword">break</span>;</div><div class="line">        <span class="keyword">case</span> <span class="built_in">Date</span>:</div><div class="line">          sExpires = <span class="string">"; expires="</span> + vEnd.toUTCString();</div><div class="line">          <span class="keyword">break</span>;</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">document</span>.cookie = <span class="built_in">encodeURIComponent</span>(sKey) + <span class="string">"="</span> + <span class="built_in">encodeURIComponent</span>(sValue) + sExpires + (sDomain ? <span class="string">"; domain="</span> + sDomain : <span class="string">""</span>) + (sPath ? <span class="string">"; path="</span> + sPath : <span class="string">""</span>) + (bSecure ? <span class="string">"; secure"</span> : <span class="string">""</span>);</div><div class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">  &#125;,</div><div class="line">  <span class="attr">removeItem</span>: <span class="function"><span class="keyword">function</span> (<span class="params">sKey, sPath, sDomain</span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span> (!sKey || !<span class="keyword">this</span>.hasItem(sKey)) &#123; <span class="keyword">return</span> <span class="literal">false</span>; &#125;</div><div class="line">    <span class="built_in">document</span>.cookie = <span class="built_in">encodeURIComponent</span>(sKey) + <span class="string">"=; expires=Thu, 01 Jan 1970 00:00:00 GMT"</span> + ( sDomain ? <span class="string">"; domain="</span> + sDomain : <span class="string">""</span>) + ( sPath ? <span class="string">"; path="</span> + sPath : <span class="string">""</span>);</div><div class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">  &#125;,</div><div class="line">  <span class="attr">hasItem</span>: <span class="function"><span class="keyword">function</span> (<span class="params">sKey</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> (<span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">"(?:^|;\\s*)"</span> + <span class="built_in">encodeURIComponent</span>(sKey).replace(<span class="regexp">/[\-\.\+\*]/g</span>, <span class="string">"\\$&amp;"</span>) + <span class="string">"\\s*\\="</span>)).test(<span class="built_in">document</span>.cookie);</div><div class="line">  &#125;,</div><div class="line">  <span class="attr">keys</span>: <span class="comment">/* optional method: you can safely remove it! */</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> aKeys = <span class="built_in">document</span>.cookie.replace(<span class="regexp">/((?:^|\s*;)[^\=]+)(?=;|$)|^\s*|\s*(?:\=[^;]*)?(?:\1|$)/g</span>, <span class="string">""</span>).split(<span class="regexp">/\s*(?:\=[^;]*)?;\s*/</span>);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> nIdx = <span class="number">0</span>; nIdx &lt; aKeys.length; nIdx++) &#123; aKeys[nIdx] = <span class="built_in">decodeURIComponent</span>(aKeys[nIdx]); &#125;</div><div class="line">    <span class="keyword">return</span> aKeys;</div><div class="line">  &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;使用客户端存储实现存储用户的偏好和状态信息&lt;/p&gt;
&lt;h2 id=&quot;需求&quot;&gt;&lt;a href=&quot;#需求&quot; class=&quot;headerlink&quot; title=&quot;需求&quot;&gt;&lt;/a&gt;需求&lt;/h2&gt;&lt;p&gt;在制作网页app时，为了更好地去提升客户的使用体验，需要去保存客户的一些信息，比如用户登陆的时候输入的密码、用户喜欢的页面风格啊（很多都是存在服务器上的），由于客户端存储遵循着&lt;strong&gt;同源策略&lt;/strong&gt;，不同站点的页面是不可以相互读取数据，但是同一站点的不同页面之间是可以进行数据通信的，这样前一个页面的表单数据就可以在另一个页面显示了。&lt;/p&gt;
&lt;p&gt;作为web应用开发者，使用这些客户端存储技术是为了更好提升用户体验，如果是要开发需要迫不得已将隐私数据存在客户端机器上，要设置数据的有效期，这个数据可以保留至当前窗口关闭之前，或者是浏览器关闭之前。客户端存储的数据甚至是可以长期存在，也可以永久保存，要正确使用这个功能，不能给用户留下隐患。&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>kindle资源</title>
    <link href="http://physihan.github.io/2016/11/05/kindle%E8%B5%84%E6%BA%90/"/>
    <id>http://physihan.github.io/2016/11/05/kindle资源/</id>
    <published>2016-11-05T06:47:39.000Z</published>
    <updated>2016-11-05T06:47:39.789Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>网页排版不得不提的BFC</title>
    <link href="http://physihan.github.io/2016/11/05/%E7%BD%91%E9%A1%B5%E6%8E%92%E7%89%88%E4%B8%8D%E5%BE%97%E4%B8%8D%E6%8F%90%E7%9A%84BFC/"/>
    <id>http://physihan.github.io/2016/11/05/网页排版不得不提的BFC/</id>
    <published>2016-11-05T02:18:39.000Z</published>
    <updated>2016-11-05T02:18:39.796Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>My New Post</title>
    <link href="http://physihan.github.io/2016/11/03/My-New-Post/"/>
    <id>http://physihan.github.io/2016/11/03/My-New-Post/</id>
    <published>2016-11-03T11:02:50.000Z</published>
    <updated>2016-11-05T06:22:37.025Z</updated>
    
    <content type="html"><![CDATA[<p>每一个好的前端，都会有一个拿得出手的项目，对于我们刚刚学习前端没多久的新人而言，把自己所学的东西通过写博客的方式记录下来是一个很好的方式，一来可以即学即用，巩固自己的理解，二来可以记录生活，方便以后去回顾。</p>
<p>那么，如何去创建一个自己的博客呢，这个其实很简单啊，很多网站都有博客板块，去注册了就能去写了，但是这种方式并不是十分geek，我们如果对自己的博客页面的个性化程度要求很高的话，那就得去自己动手去做一个博客了。</p>
<p>这里我使用的是github提供的<a href="https://pages.github.com/" target="_blank" rel="external">github pages</a>服务，对于小型博客群众是非常方便的，当然你首先得有一个github账号，这里怎么注册就不多说了，</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;每一个好的前端，都会有一个拿得出手的项目，对于我们刚刚学习前端没多久的新人而言，把自己所学的东西通过写博客的方式记录下来是一个很好的方式，一来可以即学即用，巩固自己的理解，二来可以记录生活，方便以后去回顾。&lt;/p&gt;
&lt;p&gt;那么，如何去创建一个自己的博客呢，这个其实很简单啊，
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://physihan.github.io/2016/11/03/hello-world/"/>
    <id>http://physihan.github.io/2016/11/03/hello-world/</id>
    <published>2016-11-03T10:43:27.927Z</published>
    <updated>2016-11-03T10:43:27.927Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
    
    </summary>
    
    
  </entry>
  
</feed>
